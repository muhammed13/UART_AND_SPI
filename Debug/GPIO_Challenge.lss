
GPIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000033ac  00003440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800168  00800168  00003548  2**0
                  ALLOC
  3 .stab         00004d1c  00000000  00000000  00003548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002af8  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  0000b031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  0000cb43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  0000d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  0000e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  0000ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ea       	ldi	r30, 0xAC	; 172
      78:	f3 e3       	ldi	r31, 0x33	; 51
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 de 11 	call	0x23bc	; 0x23bc <main>
      8a:	0c 94 d4 19 	jmp	0x33a8	; 0x33a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__clzsi2+0x7e>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__clzsi2+0x76>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <ultrasonic_sensor_start>:
#include "AGILE_REQ2.h"


uint8_t g8_global_distance;
void ultrasonic_sensor_start(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_obstacle_distance;
	gpioPinDirection(GPIOB,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	60 ef       	ldi	r22, 0xF0	; 240
     bee:	40 ef       	ldi	r20, 0xF0	; 240
     bf0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
			                    LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT);
	//gpioPortDirection(1,OUTPUT);
	US_init();
     bf4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <US_init>
	while(1)
	{
		US_triger();
     bf8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <US_triger>
		//US_start();
		u8_obstacle_distance=US_get_reading();
     bfc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <US_get_reading>
     c00:	89 83       	std	Y+1, r24	; 0x01
		//TCNT1=g8_global_distance;
		US_stop();
     c02:	0e 94 af 0b 	call	0x175e	; 0x175e <US_stop>
		gpioPinWrite(LED_0_GPIO,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     c06:	90 91 6b 01 	lds	r25, 0x016B
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	60 ef       	ldi	r22, 0xF0	; 240
     c0e:	49 2f       	mov	r20, r25
     c10:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
     c14:	f1 cf       	rjmp	.-30     	; 0xbf8 <ultrasonic_sensor_start+0x18>

00000c16 <car_application_with_phase_correct>:

#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000

uint8_t g8_gloabal_car_duty;
void car_application_with_phase_correct(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <car_application_with_phase_correct+0x6>
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	sei();
     c22:	78 94       	sei
	g8_gloabal_car_duty=0;
     c24:	10 92 6c 01 	sts	0x016C, r1
	uint8_t u8_i;
	uint8_t u8_j;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>



	for(u8_i=0;u8_i<10;u8_i++)
     c44:	1b 82       	std	Y+3, r1	; 0x03
     c46:	12 c0       	rjmp	.+36     	; 0xc6c <car_application_with_phase_correct+0x56>
	{
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     c48:	80 91 6c 01 	lds	r24, 0x016C
     c4c:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
		softwareDelayMs(500);
     c50:	64 ef       	ldi	r22, 0xF4	; 244
     c52:	71 e0       	ldi	r23, 0x01	; 1
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
		g8_gloabal_car_duty+=10;
     c5c:	80 91 6c 01 	lds	r24, 0x016C
     c60:	86 5f       	subi	r24, 0xF6	; 246
     c62:	80 93 6c 01 	sts	0x016C, r24
	MotorDC_Dir(MOT_1,FORWARD);
	MotorDC_Dir(MOT_2,FORWARD);



	for(u8_i=0;u8_i<10;u8_i++)
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	8a 30       	cpi	r24, 0x0A	; 10
     c70:	58 f3       	brcs	.-42     	; 0xc48 <car_application_with_phase_correct+0x32>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
     c72:	84 e6       	ldi	r24, 0x64	; 100
     c74:	80 93 6c 01 	sts	0x016C, r24
	for(u8_j=0;u8_j<10;u8_j++)
     c78:	1a 82       	std	Y+2, r1	; 0x02
     c7a:	12 c0       	rjmp	.+36     	; 0xca0 <car_application_with_phase_correct+0x8a>
	{
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     c7c:	80 91 6c 01 	lds	r24, 0x016C
     c80:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
		softwareDelayMs(500);
     c84:	64 ef       	ldi	r22, 0xF4	; 244
     c86:	71 e0       	ldi	r23, 0x01	; 1
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
		g8_gloabal_car_duty-=10;
     c90:	80 91 6c 01 	lds	r24, 0x016C
     c94:	8a 50       	subi	r24, 0x0A	; 10
     c96:	80 93 6c 01 	sts	0x016C, r24
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
	for(u8_j=0;u8_j<10;u8_j++)
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	8a 83       	std	Y+2, r24	; 0x02
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	8a 30       	cpi	r24, 0x0A	; 10
     ca4:	58 f3       	brcs	.-42     	; 0xc7c <car_application_with_phase_correct+0x66>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty-=10;
	}

	MotorDC_Dir(MOT_1,STOP);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,STOP);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	softwareDelayMs(500);
     cb6:	64 ef       	ldi	r22, 0xF4	; 244
     cb8:	71 e0       	ldi	r23, 0x01	; 1
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	g8_gloabal_car_duty=80;
     cc2:	80 e5       	ldi	r24, 0x50	; 80
     cc4:	80 93 6c 01 	sts	0x016C, r24
	for(u8_k=0;u8_k<1;u8_k++)
     cc8:	19 82       	std	Y+1, r1	; 0x01
     cca:	11 c0       	rjmp	.+34     	; 0xcee <car_application_with_phase_correct+0xd8>
	{
		MotorDC_Dir(MOT_1,FORWARD);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
     cd4:	80 91 6c 01 	lds	r24, 0x016C
     cd8:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
		softwareDelayMs(1000);
     cdc:	68 ee       	ldi	r22, 0xE8	; 232
     cde:	73 e0       	ldi	r23, 0x03	; 3
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>

	MotorDC_Dir(MOT_1,STOP);
	MotorDC_Dir(MOT_2,STOP);
	softwareDelayMs(500);
	g8_gloabal_car_duty=80;
	for(u8_k=0;u8_k<1;u8_k++)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 23       	and	r24, r24
     cf2:	61 f3       	breq	.-40     	; 0xccc <car_application_with_phase_correct+0xb6>
	{
		MotorDC_Dir(MOT_1,FORWARD);
		MotorDC_Speed_HwPWM(g8_gloabal_car_duty);
		softwareDelayMs(1000);
	}
	MotorDC_Dir(MOT_1,STOP);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	timer0Stop();
     cfc:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>

}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <car_with_ultrasonic>:

/***************************************************************************/


void car_with_ultrasonic(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <car_with_ultrasonic+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	sei();
     d16:	78 94       	sei
	g8_gloabal_car_duty=80;
     d18:	80 e5       	ldi	r24, 0x50	; 80
     d1a:	80 93 6c 01 	sts	0x016C, r24
	uint8_t u8_obstacle_distance;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>


	gpioPinDirection(LED_0_GPIO,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	60 ef       	ldi	r22, 0xF0	; 240
     d3e:	40 ef       	ldi	r20, 0xF0	; 240
     d40:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
			                    LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT);
	US_init();
     d44:	0e 94 76 0b 	call	0x16ec	; 0x16ec <US_init>
	while(1)
	{
		US_triger();
     d48:	0e 94 8a 0b 	call	0x1714	; 0x1714 <US_triger>
		US_start();
     d4c:	0e 94 a6 0b 	call	0x174c	; 0x174c <US_start>
		u8_obstacle_distance=US_get_reading();
     d50:	0e 94 b8 0b 	call	0x1770	; 0x1770 <US_get_reading>
     d54:	8a 83       	std	Y+2, r24	; 0x02
		US_stop();
     d56:	0e 94 af 0b 	call	0x175e	; 0x175e <US_stop>
		gpioPinWrite(LED_0_GPIO,LED_0_BIT | LED_1_BIT | LED_2_BIT | LED_3_BIT,
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	60 ef       	ldi	r22, 0xF0	; 240
     d5e:	4a 81       	ldd	r20, Y+2	; 0x02
     d60:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
				     u8_obstacle_distance);
		if(u8_obstacle_distance<=50 && u8_obstacle_distance>30)
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	83 33       	cpi	r24, 0x33	; 51
     d68:	78 f4       	brcc	.+30     	; 0xd88 <car_with_ultrasonic+0x7c>
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	8f 31       	cpi	r24, 0x1F	; 31
     d6e:	60 f0       	brcs	.+24     	; 0xd88 <car_with_ultrasonic+0x7c>
		{
			MotorDC_Dir(MOT_1,FORWARD);
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,FORWARD);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Speed_HwPWM(50);
     d80:	82 e3       	ldi	r24, 0x32	; 50
     d82:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
     d86:	e0 cf       	rjmp	.-64     	; 0xd48 <car_with_ultrasonic+0x3c>
		}
		else if(u8_obstacle_distance==30)
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	8e 31       	cpi	r24, 0x1E	; 30
     d8c:	39 f5       	brne	.+78     	; 0xddc <car_with_ultrasonic+0xd0>
		{
			MotorDC_Dir(MOT_1,STOP);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,STOP);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			softwareDelayMs(500);
     d9e:	64 ef       	ldi	r22, 0xF4	; 244
     da0:	71 e0       	ldi	r23, 0x01	; 1
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
			for(u8_k=0;u8_k<1;u8_k++)     /*turn right*/
     daa:	19 82       	std	Y+1, r1	; 0x01
     dac:	10 c0       	rjmp	.+32     	; 0xdce <car_with_ultrasonic+0xc2>
			{
				MotorDC_Dir(MOT_1,FORWARD);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
				MotorDC_Speed_HwPWM(80);
     db6:	80 e5       	ldi	r24, 0x50	; 80
     db8:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
				softwareDelayMs(1000);
     dbc:	68 ee       	ldi	r22, 0xE8	; 232
     dbe:	73 e0       	ldi	r23, 0x03	; 3
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
		else if(u8_obstacle_distance==30)
		{
			MotorDC_Dir(MOT_1,STOP);
			MotorDC_Dir(MOT_2,STOP);
			softwareDelayMs(500);
			for(u8_k=0;u8_k<1;u8_k++)     /*turn right*/
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 23       	and	r24, r24
     dd2:	69 f3       	breq	.-38     	; 0xdae <car_with_ultrasonic+0xa2>
			{
				MotorDC_Dir(MOT_1,FORWARD);
				MotorDC_Speed_HwPWM(80);
				softwareDelayMs(1000);
			}
			g8_gloabal_car_duty=80;
     dd4:	80 e5       	ldi	r24, 0x50	; 80
     dd6:	80 93 6c 01 	sts	0x016C, r24
     dda:	b6 cf       	rjmp	.-148    	; 0xd48 <car_with_ultrasonic+0x3c>
		}
		else if(u8_obstacle_distance<30)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	8e 31       	cpi	r24, 0x1E	; 30
     de0:	d0 f4       	brcc	.+52     	; 0xe16 <car_with_ultrasonic+0x10a>
		{
			MotorDC_Dir(MOT_1,STOP);
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,STOP);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			softwareDelayMs(500);
     df2:	64 ef       	ldi	r22, 0xF4	; 244
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
			MotorDC_Speed_HwPWM(50);
     dfe:	82 e3       	ldi	r24, 0x32	; 50
     e00:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
			MotorDC_Dir(MOT_1,BACKWARD);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	62 e0       	ldi	r22, 0x02	; 2
     e08:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,BACKWARD);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
     e14:	99 cf       	rjmp	.-206    	; 0xd48 <car_with_ultrasonic+0x3c>
		}
		else                           /*distance is greater than 50cm*/
		{
			MotorDC_Dir(MOT_1,FORWARD);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Dir(MOT_2,FORWARD);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
			MotorDC_Speed_HwPWM(80);
     e26:	80 e5       	ldi	r24, 0x50	; 80
     e28:	0e 94 cd 0c 	call	0x199a	; 0x199a <MotorDC_Speed_HwPWM>
     e2c:	8d cf       	rjmp	.-230    	; 0xd48 <car_with_ultrasonic+0x3c>

00000e2e <car_application>:

#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000

uint8_t g8_gloabal_car_duty;
void car_application(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <car_application+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	sei();
     e3a:	78 94       	sei
	g8_gloabal_car_duty=0;
     e3c:	10 92 6c 01 	sts	0x016C, r1
	uint8_t u8_i;
	uint8_t u8_j;
	uint8_t u8_k;
	MotorDC_Init(MOT_1);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Init(MOT_2);
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <MotorDC_Init>
	MotorDC_Dir(MOT_1,FORWARD);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,FORWARD);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>



	for(u8_i=0;u8_i<10;u8_i++)
     e5c:	1b 82       	std	Y+3, r1	; 0x03
     e5e:	12 c0       	rjmp	.+36     	; 0xe84 <car_application+0x56>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     e60:	80 91 6c 01 	lds	r24, 0x016C
     e64:	0e 94 bf 0c 	call	0x197e	; 0x197e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(500);
     e68:	64 ef       	ldi	r22, 0xF4	; 244
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
		g8_gloabal_car_duty+=10;
     e74:	80 91 6c 01 	lds	r24, 0x016C
     e78:	86 5f       	subi	r24, 0xF6	; 246
     e7a:	80 93 6c 01 	sts	0x016C, r24
	MotorDC_Dir(MOT_1,FORWARD);
	MotorDC_Dir(MOT_2,FORWARD);



	for(u8_i=0;u8_i<10;u8_i++)
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	8b 83       	std	Y+3, r24	; 0x03
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	8a 30       	cpi	r24, 0x0A	; 10
     e88:	58 f3       	brcs	.-42     	; 0xe60 <car_application+0x32>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
     e8a:	84 e6       	ldi	r24, 0x64	; 100
     e8c:	80 93 6c 01 	sts	0x016C, r24
	for(u8_j=0;u8_j<10;u8_j++)
     e90:	1a 82       	std	Y+2, r1	; 0x02
     e92:	12 c0       	rjmp	.+36     	; 0xeb8 <car_application+0x8a>
	{
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     e94:	80 91 6c 01 	lds	r24, 0x016C
     e98:	0e 94 bf 0c 	call	0x197e	; 0x197e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(500);
     e9c:	64 ef       	ldi	r22, 0xF4	; 244
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
		g8_gloabal_car_duty-=10;
     ea8:	80 91 6c 01 	lds	r24, 0x016C
     eac:	8a 50       	subi	r24, 0x0A	; 10
     eae:	80 93 6c 01 	sts	0x016C, r24
		softwareDelayMs(500);
		g8_gloabal_car_duty+=10;
	}

	g8_gloabal_car_duty=100;
	for(u8_j=0;u8_j<10;u8_j++)
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	8a 83       	std	Y+2, r24	; 0x02
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	58 f3       	brcs	.-42     	; 0xe94 <car_application+0x66>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(500);
		g8_gloabal_car_duty-=10;
	}

	MotorDC_Dir(MOT_1,STOP);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	MotorDC_Dir(MOT_2,STOP);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	softwareDelayMs(500);
     ece:	64 ef       	ldi	r22, 0xF4	; 244
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	g8_gloabal_car_duty=80;
     eda:	80 e5       	ldi	r24, 0x50	; 80
     edc:	80 93 6c 01 	sts	0x016C, r24
	for(u8_k=0;u8_k<1;u8_k++)
     ee0:	19 82       	std	Y+1, r1	; 0x01
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <car_application+0xd8>
	{
		MotorDC_Dir(MOT_1,FORWARD);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
     eec:	80 91 6c 01 	lds	r24, 0x016C
     ef0:	0e 94 bf 0c 	call	0x197e	; 0x197e <MotorDC_Speed_PollingWithT0>
		softwareDelayMs(1000);
     ef4:	68 ee       	ldi	r22, 0xE8	; 232
     ef6:	73 e0       	ldi	r23, 0x03	; 3
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>

	MotorDC_Dir(MOT_1,STOP);
	MotorDC_Dir(MOT_2,STOP);
	softwareDelayMs(500);
	g8_gloabal_car_duty=80;
	for(u8_k=0;u8_k<1;u8_k++)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 23       	and	r24, r24
     f0a:	61 f3       	breq	.-40     	; 0xee4 <car_application+0xb6>
	{
		MotorDC_Dir(MOT_1,FORWARD);
		MotorDC_Speed_PollingWithT0(g8_gloabal_car_duty);
		softwareDelayMs(1000);
	}
	MotorDC_Dir(MOT_1,STOP);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	0e 94 33 0c 	call	0x1866	; 0x1866 <MotorDC_Dir>
	timer0Stop();
     f14:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>

}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <sevensegments>:
#define MAX_NUMBER 9
#define SWITCHING_TIME 5
#define NUMBER_OF_ITERATION_FOR_ONE_SEC 50

void sevensegments(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <sevensegments+0x6>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	sevenSegInit(SEG_0);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 17 13 	call	0x262e	; 0x262e <sevenSegInit>
	sevenSegInit(SEG_1);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 17 13 	call	0x262e	; 0x262e <sevenSegInit>

	uint8_t counter1;
	uint8_t counter2=START_;
     f3c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     f3e:	1b 82       	std	Y+3, r1	; 0x03
     f40:	37 c0       	rjmp	.+110    	; 0xfb0 <sevensegments+0x8c>
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	2f c0       	rjmp	.+94     	; 0xfa4 <sevensegments+0x80>
			{
				sevenSegWrite(SEG_0, counter1);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	6b 81       	ldd	r22, Y+3	; 0x03
     f4a:	0e 94 aa 13 	call	0x2754	; 0x2754 <sevenSegWrite>
				sevenSegEnable(SEG_0);
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     f54:	65 e0       	ldi	r22, 0x05	; 5
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				sevenSegDisable(SEG_0);
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	0e 94 83 13 	call	0x2706	; 0x2706 <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     f66:	65 e0       	ldi	r22, 0x05	; 5
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>

				sevenSegWrite(SEG_1, counter2);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	6a 81       	ldd	r22, Y+2	; 0x02
     f76:	0e 94 aa 13 	call	0x2754	; 0x2754 <sevenSegWrite>
				sevenSegEnable(SEG_1);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <sevenSegEnable>
				softwareDelayMs(SWITCHING_TIME);
     f80:	65 e0       	ldi	r22, 0x05	; 5
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				sevenSegDisable(SEG_1);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	0e 94 83 13 	call	0x2706	; 0x2706 <sevenSegDisable>
				softwareDelayMs(SWITCHING_TIME);
     f92:	65 e0       	ldi	r22, 0x05	; 5
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
		{
			for(i=START_;i<NUMBER_OF_ITERATION_FOR_ONE_SEC;i++)
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	82 33       	cpi	r24, 0x32	; 50
     fa8:	70 f2       	brcs	.-100    	; 0xf46 <sevensegments+0x22>
	uint8_t counter1;
	uint8_t counter2=START_;
	uint8_t i;
	while(TRUE)
	{
		for(counter1=START_;counter1<=MAX_NUMBER;counter1++)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	8a 30       	cpi	r24, 0x0A	; 10
     fb4:	30 f2       	brcs	.-116    	; 0xf42 <sevensegments+0x1e>
				sevenSegDisable(SEG_1);
				softwareDelayMs(SWITCHING_TIME);

			}
		}
		counter2++;
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	8a 83       	std	Y+2, r24	; 0x02
		if(counter2==MAX_NUMBER+1)
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	8a 30       	cpi	r24, 0x0A	; 10
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <sevensegments+0xa0>
     fc2:	bd cf       	rjmp	.-134    	; 0xf3e <sevensegments+0x1a>
		{
			counter2=START_;
     fc4:	1a 82       	std	Y+2, r1	; 0x02
     fc6:	bb cf       	rjmp	.-138    	; 0xf3e <sevensegments+0x1a>

00000fc8 <button_led>:
#define NUMBER_OF_ITERATION_FOR_ONE_SEC 80000
#define MIN_FLAG_VALUE 10
#define START 0

void button_led(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <button_led+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <button_led+0x8>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
     fd6:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	pushButtonInit(BTN_1);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 16 12 	call	0x242c	; 0x242c <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <pushButtonGetStatus>
     fea:	88 23       	and	r24, r24
     fec:	d9 f3       	breq	.-10     	; 0xfe4 <button_led+0x1c>
		{
			Led_On(LED_1);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
     ff4:	19 82       	std	Y+1, r1	; 0x01
     ff6:	1a 82       	std	Y+2, r1	; 0x02
     ff8:	1b 82       	std	Y+3, r1	; 0x03
     ffa:	1c 82       	std	Y+4, r1	; 0x04
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <button_led+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 64 12 	call	0x24c8	; 0x24c8 <pushButtonGetStatus>
    1004:	88 23       	and	r24, r24
    1006:	19 f0       	breq	.+6      	; 0x100e <button_led+0x46>
	    		{
	    			u8_flag++;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	ab 81       	ldd	r26, Y+3	; 0x03
    1014:	bc 81       	ldd	r27, Y+4	; 0x04
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	a1 1d       	adc	r26, r1
    101a:	b1 1d       	adc	r27, r1
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	ab 83       	std	Y+3, r26	; 0x03
    1022:	bc 83       	std	Y+4, r27	; 0x04
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	ab 81       	ldd	r26, Y+3	; 0x03
    102a:	bc 81       	ldd	r27, Y+4	; 0x04
    102c:	80 38       	cpi	r24, 0x80	; 128
    102e:	28 e3       	ldi	r18, 0x38	; 56
    1030:	92 07       	cpc	r25, r18
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	a2 07       	cpc	r26, r18
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	b2 07       	cpc	r27, r18
    103a:	08 f3       	brcs	.-62     	; 0xffe <button_led+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	8b 30       	cpi	r24, 0x0B	; 11
    1040:	30 f0       	brcs	.+12     	; 0x104e <button_led+0x86>
	    	{
	    		softwareDelayMs(ONE_SEC);
    1042:	68 ee       	ldi	r22, 0xE8	; 232
    1044:	73 e0       	ldi	r23, 0x03	; 3
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	    	}
	    	Led_Off(LED_1);
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
	    	softwareDelayMs(ONE_SEC);
    1054:	68 ee       	ldi	r22, 0xE8	; 232
    1056:	73 e0       	ldi	r23, 0x03	; 3
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	    	u8_flag=START;
    1060:	1d 82       	std	Y+5, r1	; 0x05
    1062:	c0 cf       	rjmp	.-128    	; 0xfe4 <button_led+0x1c>

00001064 <button_led_using_timer0>:
	}
}


void button_led_using_timer0(void)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <button_led_using_timer0+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <button_led_using_timer0+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_flag=START;
    1072:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_i;
	Led_Init(LED_1);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	pushButtonInit(BTN_1);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 16 12 	call	0x242c	; 0x242c <pushButtonInit>
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 64 12 	call	0x24c8	; 0x24c8 <pushButtonGetStatus>
    1086:	88 23       	and	r24, r24
    1088:	d9 f3       	breq	.-10     	; 0x1080 <button_led_using_timer0+0x1c>
		{
			Led_On(LED_1);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	1a 82       	std	Y+2, r1	; 0x02
    1094:	1b 82       	std	Y+3, r1	; 0x03
    1096:	1c 82       	std	Y+4, r1	; 0x04
    1098:	13 c0       	rjmp	.+38     	; 0x10c0 <button_led_using_timer0+0x5c>
	    	{
	    		if(pushButtonGetStatus(BTN_1))
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <pushButtonGetStatus>
    10a0:	88 23       	and	r24, r24
    10a2:	19 f0       	breq	.+6      	; 0x10aa <button_led_using_timer0+0x46>
	    		{
	    			u8_flag++;
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	8d 83       	std	Y+5, r24	; 0x05
	while(TRUE)
	{
		if(pushButtonGetStatus(BTN_1))
		{
			Led_On(LED_1);
	    	for(u32_i=START;u32_i<NUMBER_OF_ITERATION_FOR_ONE_SEC;u32_i++)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	ab 81       	ldd	r26, Y+3	; 0x03
    10b0:	bc 81       	ldd	r27, Y+4	; 0x04
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	a1 1d       	adc	r26, r1
    10b6:	b1 1d       	adc	r27, r1
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	ab 83       	std	Y+3, r26	; 0x03
    10be:	bc 83       	std	Y+4, r27	; 0x04
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	ab 81       	ldd	r26, Y+3	; 0x03
    10c6:	bc 81       	ldd	r27, Y+4	; 0x04
    10c8:	80 38       	cpi	r24, 0x80	; 128
    10ca:	28 e3       	ldi	r18, 0x38	; 56
    10cc:	92 07       	cpc	r25, r18
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	a2 07       	cpc	r26, r18
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	b2 07       	cpc	r27, r18
    10d6:	08 f3       	brcs	.-62     	; 0x109a <button_led_using_timer0+0x36>
	    		if(pushButtonGetStatus(BTN_1))
	    		{
	    			u8_flag++;
	    		}
	    	}
	    	if(u8_flag>MIN_FLAG_VALUE)
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	8b 30       	cpi	r24, 0x0B	; 11
    10dc:	20 f0       	brcs	.+8      	; 0x10e6 <button_led_using_timer0+0x82>
	    	{
	    		timer0DelayMs(ONE_SEC);
    10de:	88 ee       	ldi	r24, 0xE8	; 232
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 b1 14 	call	0x2962	; 0x2962 <timer0DelayMs>
	    	}
	    	Led_Off(LED_1);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
	    	timer0DelayMs(ONE_SEC);
    10ec:	88 ee       	ldi	r24, 0xE8	; 232
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	0e 94 b1 14 	call	0x2962	; 0x2962 <timer0DelayMs>
	    	u8_flag=START;
    10f4:	1d 82       	std	Y+5, r1	; 0x05
    10f6:	c4 cf       	rjmp	.-120    	; 0x1080 <button_led_using_timer0+0x1c>

000010f8 <trafficlight>:
#include "GPIO_REQ9.h"
void trafficlight(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <trafficlight+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_2);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_3);
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	en_STATE state=GO_;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3b 83       	std	Y+3, r19	; 0x03
    1122:	2a 83       	std	Y+2, r18	; 0x02
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	91 05       	cpc	r25, r1
    112c:	c9 f0       	breq	.+50     	; 0x1160 <trafficlight+0x68>
    112e:	2a 81       	ldd	r18, Y+2	; 0x02
    1130:	3b 81       	ldd	r19, Y+3	; 0x03
    1132:	23 30       	cpi	r18, 0x03	; 3
    1134:	31 05       	cpc	r19, r1
    1136:	19 f1       	breq	.+70     	; 0x117e <trafficlight+0x86>
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	61 f7       	brne	.-40     	; 0x111a <trafficlight+0x22>
		{
			case GO_:
				Led_On(LED_1);
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				softwareDelayMs(ONE_SEC_);
    1148:	68 ee       	ldi	r22, 0xE8	; 232
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				Led_Off(LED_1);
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=STOP_;
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	dd cf       	rjmp	.-70     	; 0x111a <trafficlight+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				softwareDelayMs(ONE_SEC_);
    1166:	68 ee       	ldi	r22, 0xE8	; 232
    1168:	73 e0       	ldi	r23, 0x03	; 3
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				Led_Off(LED_2);
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=GO_;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	ce cf       	rjmp	.-100    	; 0x111a <trafficlight+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				softwareDelayMs(ONE_SEC_);
    1184:	68 ee       	ldi	r22, 0xE8	; 232
    1186:	73 e0       	ldi	r23, 0x03	; 3
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				Led_Off(LED_3);
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=READY_;
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	bf cf       	rjmp	.-130    	; 0x111a <trafficlight+0x22>

0000119c <trafficlight_using_timer0>:

	}
}

void trafficlight_using_timer0(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <trafficlight_using_timer0+0x6>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_2);
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_3);
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	en_STATE state=GO_;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3b 83       	std	Y+3, r19	; 0x03
    11c6:	2a 83       	std	Y+2, r18	; 0x02
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	b9 f0       	breq	.+46     	; 0x1200 <trafficlight_using_timer0+0x64>
    11d2:	2a 81       	ldd	r18, Y+2	; 0x02
    11d4:	3b 81       	ldd	r19, Y+3	; 0x03
    11d6:	23 30       	cpi	r18, 0x03	; 3
    11d8:	31 05       	cpc	r19, r1
    11da:	f9 f0       	breq	.+62     	; 0x121a <trafficlight_using_timer0+0x7e>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	61 f7       	brne	.-40     	; 0x11be <trafficlight_using_timer0+0x22>
		{
			case GO_:
				Led_On(LED_1);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer0DelayMs(ONE_SEC_);
    11ec:	88 ee       	ldi	r24, 0xE8	; 232
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 b1 14 	call	0x2962	; 0x2962 <timer0DelayMs>
				Led_Off(LED_1);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=STOP_;
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	df cf       	rjmp	.-66     	; 0x11be <trafficlight_using_timer0+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer0DelayMs(ONE_SEC_);
    1206:	88 ee       	ldi	r24, 0xE8	; 232
    1208:	93 e0       	ldi	r25, 0x03	; 3
    120a:	0e 94 b1 14 	call	0x2962	; 0x2962 <timer0DelayMs>
				Led_Off(LED_2);
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=GO_;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	d2 cf       	rjmp	.-92     	; 0x11be <trafficlight_using_timer0+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer0DelayMs(ONE_SEC_);
    1220:	88 ee       	ldi	r24, 0xE8	; 232
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	0e 94 b1 14 	call	0x2962	; 0x2962 <timer0DelayMs>
				Led_Off(LED_3);
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=READY_;
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	c5 cf       	rjmp	.-118    	; 0x11be <trafficlight_using_timer0+0x22>

00001234 <trafficlight_using_timer1>:
	}
}


void trafficlight_using_timer1(void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <trafficlight_using_timer1+0x6>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED_1);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_2);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_3);
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	en_STATE state=GO_;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		switch(state)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3b 83       	std	Y+3, r19	; 0x03
    125e:	2a 83       	std	Y+2, r18	; 0x02
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	b9 f0       	breq	.+46     	; 0x1298 <trafficlight_using_timer1+0x64>
    126a:	2a 81       	ldd	r18, Y+2	; 0x02
    126c:	3b 81       	ldd	r19, Y+3	; 0x03
    126e:	23 30       	cpi	r18, 0x03	; 3
    1270:	31 05       	cpc	r19, r1
    1272:	f9 f0       	breq	.+62     	; 0x12b2 <trafficlight_using_timer1+0x7e>
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	9b 81       	ldd	r25, Y+3	; 0x03
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	61 f7       	brne	.-40     	; 0x1256 <trafficlight_using_timer1+0x22>
		{
			case GO_:
				Led_On(LED_1);
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer1DelayMs(ONE_SEC_);
    1284:	88 ee       	ldi	r24, 0xE8	; 232
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <timer1DelayMs>
				Led_Off(LED_1);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=STOP_;
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	df cf       	rjmp	.-66     	; 0x1256 <trafficlight_using_timer1+0x22>
				break;
			case READY_:
				Led_On(LED_2);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer1DelayMs(ONE_SEC_);
    129e:	88 ee       	ldi	r24, 0xE8	; 232
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <timer1DelayMs>
				Led_Off(LED_2);
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=GO_;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	d2 cf       	rjmp	.-92     	; 0x1256 <trafficlight_using_timer1+0x22>
				break;
			case STOP_:
				Led_On(LED_3);
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	0e 94 13 11 	call	0x2226	; 0x2226 <Led_On>
				timer1DelayMs(ONE_SEC_);
    12b8:	88 ee       	ldi	r24, 0xE8	; 232
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <timer1DelayMs>
				Led_Off(LED_3);
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	0e 94 56 11 	call	0x22ac	; 0x22ac <Led_Off>
				state=READY_;
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	c5 cf       	rjmp	.-118    	; 0x1256 <trafficlight_using_timer1+0x22>

000012cc <trafficlight_using_timer0_using_interrupts>:
	}
}


void trafficlight_using_timer0_using_interrupts(void)
{
    12cc:	ef 92       	push	r14
    12ce:	0f 93       	push	r16
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	sei();
    12d8:	78 94       	sei
	Led_Init(LED_1);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_2);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_3);
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
    g8_state=GO_;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	80 93 6e 01 	sts	0x016E, r24
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    12f2:	88 e0       	ldi	r24, 0x08	; 8
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	43 e0       	ldi	r20, 0x03	; 3
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	0a ef       	ldi	r16, 0xFA	; 250
    12fc:	ee 24       	eor	r14, r14
    12fe:	68 94       	set
    1300:	e1 f8       	bld	r14, 1
    1302:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
    1306:	ff cf       	rjmp	.-2      	; 0x1306 <trafficlight_using_timer0_using_interrupts+0x3a>

00001308 <trafficlight_using_timer0_using_interrupts_button>:
	}
}


void trafficlight_using_timer0_using_interrupts_button(void)
{
    1308:	ef 92       	push	r14
    130a:	0f 93       	push	r16
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	INT0_Init(RISIGING_EDGE);
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <INT0_Init>
	g8_gloabal_int0_flag=0;
    131a:	10 92 68 01 	sts	0x0168, r1
	Led_Init(LED_1);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_2);
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	Led_Init(LED_3);
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	0e 94 bc 10 	call	0x2178	; 0x2178 <Led_Init>
	while(TRUE)
	{
		if(g8_gloabal_int0_flag==1)
    1330:	80 91 68 01 	lds	r24, 0x0168
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	e1 f7       	brne	.-8      	; 0x1330 <trafficlight_using_timer0_using_interrupts_button+0x28>
		{
		    g8_state=STOP_;
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	80 93 6e 01 	sts	0x016E, r24
			timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    133e:	88 e0       	ldi	r24, 0x08	; 8
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	43 e0       	ldi	r20, 0x03	; 3
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	0a ef       	ldi	r16, 0xFA	; 250
    1348:	ee 24       	eor	r14, r14
    134a:	68 94       	set
    134c:	e1 f8       	bld	r14, 1
    134e:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
			g8_gloabal_int0_flag=0;
    1352:	10 92 68 01 	sts	0x0168, r1
    1356:	ec cf       	rjmp	.-40     	; 0x1330 <trafficlight_using_timer0_using_interrupts_button+0x28>

00001358 <__vector_1>:


/*******************************these ISRs for Ultrasonic sensor*******************************************/

ISR(INT0_vect)
{
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	2f 93       	push	r18
    1364:	3f 93       	push	r19
    1366:	4f 93       	push	r20
    1368:	5f 93       	push	r21
    136a:	6f 93       	push	r22
    136c:	7f 93       	push	r23
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	af 93       	push	r26
    1374:	bf 93       	push	r27
    1376:	ef 93       	push	r30
    1378:	ff 93       	push	r31
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <__vector_1+0x28>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <__vector_1+0x2a>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <__vector_1+0x2c>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	    gpioPortWrite(2,10);
	    TCNT0=0;
	    counter=0;
	}
	*/
	g8_gloabal_int0_flag=1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	80 93 68 01 	sts	0x0168, r24
	uint8_t x;
	x=TCNT0;
    138e:	e2 e5       	ldi	r30, 0x52	; 82
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8c 83       	std	Y+4, r24	; 0x04
	TCNT0=0;
    1396:	e2 e5       	ldi	r30, 0x52	; 82
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	10 82       	st	Z, r1
	TCNT1=x;
    139c:	ec e4       	ldi	r30, 0x4C	; 76
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	80 83       	st	Z, r24
	//x/=2;
	gpioPinDirection(GPIOB, BIT3, OUTPUT); //useless
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	68 e0       	ldi	r22, 0x08	; 8
    13ae:	4f ef       	ldi	r20, 0xFF	; 255
    13b0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
	gpioPinToggle(GPIOB,BIT3);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	68 e0       	ldi	r22, 0x08	; 8
    13b8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
	uint16_t time=((x*4)/2);
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	99 23       	and	r25, r25
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <__vector_1+0x88>
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	95 95       	asr	r25
    13e6:	87 95       	ror	r24
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	//uint8_t distance=(uint8_t)((time*340*100)/1000000);
	uint8_t distance= (uint8_t)(x*2/60);
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	2c e3       	ldi	r18, 0x3C	; 60
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	b9 01       	movw	r22, r18
    13fc:	0e 94 76 19 	call	0x32ec	; 0x32ec <__divmodhi4>
    1400:	cb 01       	movw	r24, r22
    1402:	89 83       	std	Y+1, r24	; 0x01
	//uint8_t distance= (uint8_t)(x*8/60);
	//uint8_t distance=d;
	TCNT2=distance;
    1404:	e4 e4       	ldi	r30, 0x44	; 68
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	80 83       	st	Z, r24
	gpioPortDirection(GPIOB,OUTPUT);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	6f ef       	ldi	r22, 0xFF	; 255
    1410:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <gpioPortDirection>
	gpioPortWrite(GPIOB,distance);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	69 81       	ldd	r22, Y+1	; 0x01
    1418:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <gpioPortWrite>


}
    141c:	26 96       	adiw	r28, 0x06	; 6
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <SwICU_Init>:

#include "SwICU.h"
volatile uint8_t g8_SwICU_value;

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
    1448:	ef 92       	push	r14
    144a:	0f 93       	push	r16
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	INT0_Init(a_en_inputCaptureEdge);
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <INT0_Init>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,0,T0_POLLING);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	43 e0       	ldi	r20, 0x03	; 3
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	00 e0       	ldi	r16, 0x00	; 0
    1468:	ee 24       	eor	r14, r14
    146a:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
}
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	0f 91       	pop	r16
    1476:	ef 90       	pop	r14
    1478:	08 95       	ret

0000147a <SwICU_SetCfgEdge>:


void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01

}
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <SwICU_Read>:


void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <SwICU_Read+0x6>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	*a_pu8_capt=g8_SwICU_value;
    149c:	80 91 6d 01 	lds	r24, 0x016D
    14a0:	e9 81       	ldd	r30, Y+1	; 0x01
    14a2:	fa 81       	ldd	r31, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <SwICU_Start>:

void SwICU_Start(void)
{
    14b0:	ef 92       	push	r14
    14b2:	0f 93       	push	r16
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	/* one timer tick = .5 (us) for 8 prescaller
	 * one timer tick = 4 (us) for 64 prescaller
	 * one timer tick = 16 (us) for 256 prescaller
	 * one timer tick = 64 (us) for 1024 prescaller
	 * */
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,0,T0_POLLING);
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	43 e0       	ldi	r20, 0x03	; 3
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	ee 24       	eor	r14, r14
    14c8:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	0f 91       	pop	r16
    14d2:	ef 90       	pop	r14
    14d4:	08 95       	ret

000014d6 <SwICU_Stop>:

void SwICU_Stop(void)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
	timer0Stop();
    14de:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <SwICU_Enable>:

void SwICU_Enable(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62

}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <SwICU_Disable>:

void SwICU_Disable(void)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    14fe:	e2 e5       	ldi	r30, 0x52	; 82
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	10 82       	st	Z, r1
	timer0Stop();
    1504:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>
	INT0_DeInit();
    1508:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <INT0_DeInit>
}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_Config_Structure * UART_Init_Structure)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <UART_init+0x6>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
	/****************************UCSRA Description************************
	 * U2X => double transmission speed
	 * MPCM =>Multi processor communication
	 *********************************************************************/

	UCSRA = UART_Init_Structure->Speed_Mode | UART_Init_Structure->Multi_Processor_Comm_Mode;
    1520:	ab e2       	ldi	r26, 0x2B	; 43
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	94 85       	ldd	r25, Z+12	; 0x0c
    152a:	e9 81       	ldd	r30, Y+1	; 0x01
    152c:	fa 81       	ldd	r31, Y+2	; 0x02
    152e:	85 85       	ldd	r24, Z+13	; 0x0d
    1530:	89 2b       	or	r24, r25
    1532:	8c 93       	st	X, r24
	 * RXEN  => Transmitter Enable
	 * UCSZ2 => 9-bit data mode... bit number nine used as identify the frame as data frame or address frame
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/

	UCSRB = UART_Init_Structure->Receive_Complete_Inter | UART_Init_Structure->Transmit_Complete_Inter |
    1534:	aa e2       	ldi	r26, 0x2A	; 42
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e9 81       	ldd	r30, Y+1	; 0x01
    153a:	fa 81       	ldd	r31, Y+2	; 0x02
    153c:	95 81       	ldd	r25, Z+5	; 0x05
    153e:	e9 81       	ldd	r30, Y+1	; 0x01
    1540:	fa 81       	ldd	r31, Y+2	; 0x02
    1542:	86 81       	ldd	r24, Z+6	; 0x06
    1544:	98 2b       	or	r25, r24
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	87 81       	ldd	r24, Z+7	; 0x07
    154c:	98 2b       	or	r25, r24
    154e:	e9 81       	ldd	r30, Y+1	; 0x01
    1550:	fa 81       	ldd	r31, Y+2	; 0x02
    1552:	80 85       	ldd	r24, Z+8	; 0x08
    1554:	98 2b       	or	r25, r24
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	81 85       	ldd	r24, Z+9	; 0x09
    155c:	98 2b       	or	r25, r24
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	82 85       	ldd	r24, Z+10	; 0x0a
    1564:	98 2b       	or	r25, r24
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	83 85       	ldd	r24, Z+11	; 0x0b
    156c:	89 2b       	or	r24, r25
    156e:	8c 93       	st	X, r24
	 * USBS    => stop bit mode
	 * UCSZ1:0 => data mode
	 * UCPOL   => Clk Polarity... Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC = (1<<URSEL) | UART_Init_Structure->Synch_Mode | UART_Init_Structure->Parity_Mode |
    1570:	a0 e4       	ldi	r26, 0x40	; 64
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	90 81       	ld	r25, Z
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	98 2b       	or	r25, r24
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	98 2b       	or	r25, r24
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	83 81       	ldd	r24, Z+3	; 0x03
    1590:	98 2b       	or	r25, r24
    1592:	e9 81       	ldd	r30, Y+1	; 0x01
    1594:	fa 81       	ldd	r31, Y+2	; 0x02
    1596:	84 81       	ldd	r24, Z+4	; 0x04
    1598:	89 2b       	or	r24, r25
    159a:	80 68       	ori	r24, 0x80	; 128
    159c:	8c 93       	st	X, r24


	//UCSRC = 0X86;
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//UCSRC = 0X06;
	UBRRH = UART_Init_Structure->Double_Speed_Baud_Rate>>8;
    159e:	a0 e4       	ldi	r26, 0x40	; 64
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	86 85       	ldd	r24, Z+14	; 0x0e
    15a8:	97 85       	ldd	r25, Z+15	; 0x0f
    15aa:	89 2f       	mov	r24, r25
    15ac:	99 27       	eor	r25, r25
    15ae:	8c 93       	st	X, r24
	UBRRL = UART_Init_Structure->Double_Speed_Baud_Rate;
    15b0:	a9 e2       	ldi	r26, 0x29	; 41
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 81       	ldd	r30, Y+1	; 0x01
    15b6:	fa 81       	ldd	r31, Y+2	; 0x02
    15b8:	86 85       	ldd	r24, Z+14	; 0x0e
    15ba:	97 85       	ldd	r25, Z+15	; 0x0f
    15bc:	8c 93       	st	X, r24

}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <UART_sendByte>:


void UART_sendByte(const uint8_t data)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    15d4:	eb e2       	ldi	r30, 0x2B	; 43
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	80 72       	andi	r24, 0x20	; 32
    15e0:	90 70       	andi	r25, 0x00	; 0
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	b9 f3       	breq	.-18     	; 0x15d4 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    15e6:	ec e2       	ldi	r30, 0x2C	; 44
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    15fe:	eb e2       	ldi	r30, 0x2B	; 43
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	88 23       	and	r24, r24
    1606:	dc f7       	brge	.-10     	; 0x15fe <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1608:	ec e2       	ldi	r30, 0x2C	; 44
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <UART_sendString>:

void UART_sendString(const uint8_t *Str)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <UART_sendString+0x6>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9b 83       	std	Y+3, r25	; 0x03
    1622:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	fc 01       	movw	r30, r24
    1634:	e2 0f       	add	r30, r18
    1636:	f3 1f       	adc	r31, r19
    1638:	80 81       	ld	r24, Z
    163a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <UART_sendByte>
		i++;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	8f 5f       	subi	r24, 0xFF	; 255
    1642:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	fc 01       	movw	r30, r24
    1650:	e2 0f       	add	r30, r18
    1652:	f3 1f       	adc	r31, r19
    1654:	80 81       	ld	r24, Z
    1656:	88 23       	and	r24, r24
    1658:	39 f7       	brne	.-50     	; 0x1628 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <UART_receiveString>:

void UART_receiveString(uint8_t *Str)
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <UART_receiveString+0xa>
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    167a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	8c 01       	movw	r16, r24
    1688:	02 0f       	add	r16, r18
    168a:	13 1f       	adc	r17, r19
    168c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <UART_recieveByte>
    1690:	f8 01       	movw	r30, r16
    1692:	80 83       	st	Z, r24
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	9b 81       	ldd	r25, Y+3	; 0x03
    16a6:	8c 01       	movw	r16, r24
    16a8:	02 0f       	add	r16, r18
    16aa:	13 1f       	adc	r17, r19
    16ac:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <UART_recieveByte>
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	fc 01       	movw	r30, r24
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	80 81       	ld	r24, Z
    16c6:	83 32       	cpi	r24, 0x23	; 35
    16c8:	31 f7       	brne	.-52     	; 0x1696 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	fc 01       	movw	r30, r24
    16d6:	e2 0f       	add	r30, r18
    16d8:	f3 1f       	adc	r31, r19
    16da:	10 82       	st	Z, r1
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <US_init>:

/************************************************************************/

/********************************functions********************************/
void US_init(void)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	gpioPinDirection(GPIOA, BIT0,OUTPUT);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	4f ef       	ldi	r20, 0xFF	; 255
    16fa:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
	gpioPinWrite(GPIOA, BIT0,BIT0); /*enable pull-up resistor*/
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
	SwICU_Init(SwICU_EdgeRisiging);
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	0e 94 24 0a 	call	0x1448	; 0x1448 <SwICU_Init>
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <US_triger>:

void US_triger(void)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	INT0_DeInit();
    171c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <INT0_DeInit>
	gpioPinWrite(US_TRIGGER_GPIO,US_TRIGGER_BIT,US_TRIGGER_BIT);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
	softwareDelayMs(1);
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
	gpioPinWrite(US_TRIGGER_GPIO,US_TRIGGER_BIT,LOW);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
	INT0_Init(RISIGING_EDGE);
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <INT0_Init>
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <US_start>:

void US_start(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	SwICU_Start();
    1754:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SwICU_Start>
}
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <US_stop>:

void US_stop(void)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
	SwICU_Disable();
    1766:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <SwICU_Disable>
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <US_get_reading>:

uint8_t US_get_reading(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <US_get_reading+0x6>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	 * 4 m = 11764.7 us *2  with 1024 pre 183.8 ticks
	 * 15 m =44117.6 us */

	volatile uint8_t u8_timer_ticks;
	uint8_t u8_distance;
	while(g8_gloabal_int0_flag==DOWN);
    177a:	80 91 68 01 	lds	r24, 0x0168
    177e:	88 23       	and	r24, r24
    1780:	e1 f3       	breq	.-8      	; 0x177a <US_get_reading+0xa>
	g8_gloabal_int0_flag=DOWN;
    1782:	10 92 68 01 	sts	0x0168, r1
	SwICU_Read(&u8_timer_ticks);
    1786:	ce 01       	movw	r24, r28
    1788:	02 96       	adiw	r24, 0x02	; 2
    178a:	0e 94 47 0a 	call	0x148e	; 0x148e <SwICU_Read>
	u8_distance=(uint8_t)(u8_timer_ticks/15);
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9f e0       	ldi	r25, 0x0F	; 15
    1792:	69 2f       	mov	r22, r25
    1794:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__udivmodqi4>
    1798:	89 83       	std	Y+1, r24	; 0x01
	return u8_distance;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <US_deinit>:

void US_deinit(void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62

}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <MotorDC_Init>:
#include "dcMotor.h"



void MotorDC_Init(En_motorType_t en_motor_number)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <MotorDC_Init+0x6>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3b 83       	std	Y+3, r19	; 0x03
    17ca:	2a 83       	std	Y+2, r18	; 0x02
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	31 f0       	breq	.+12     	; 0x17e0 <MotorDC_Init+0x2c>
    17d4:	2a 81       	ldd	r18, Y+2	; 0x02
    17d6:	3b 81       	ldd	r19, Y+3	; 0x03
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	31 05       	cpc	r19, r1
    17dc:	01 f1       	breq	.+64     	; 0x181e <MotorDC_Init+0x6a>
    17de:	3d c0       	rjmp	.+122    	; 0x185a <MotorDC_Init+0xa6>
	{
		case(MOT_1):
				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	60 e1       	ldi	r22, 0x10	; 16
    17e4:	4f ef       	ldi	r20, 0xFF	; 255
    17e6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_EN_1_BIT,LOW);
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	60 e1       	ldi	r22, 0x10	; 16
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	4f ef       	ldi	r20, 0xFF	; 255
    17fa:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	64 e0       	ldi	r22, 0x04	; 4
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	68 e0       	ldi	r22, 0x08	; 8
    180c:	4f ef       	ldi	r20, 0xFF	; 255
    180e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	68 e0       	ldi	r22, 0x08	; 8
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    181c:	1e c0       	rjmp	.+60     	; 0x185a <MotorDC_Init+0xa6>

				break;

		case(MOT_2):
				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,OUTPUT);  /*set direction for motor1 enable pin*/
    181e:	83 e0       	ldi	r24, 0x03	; 3
    1820:	60 e2       	ldi	r22, 0x20	; 32
    1822:	4f ef       	ldi	r20, 0xFF	; 255
    1824:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_EN_2_BIT,LOW);   /*disable motor1*/
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	60 e2       	ldi	r22, 0x20	; 32
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	60 e4       	ldi	r22, 0x40	; 64
    1836:	4f ef       	ldi	r20, 0xFF	; 255
    1838:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	60 e4       	ldi	r22, 0x40	; 64
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>

				gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	60 e8       	ldi	r22, 0x80	; 128
    184a:	4f ef       	ldi	r20, 0xFF	; 255
    184c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>

				gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	60 e8       	ldi	r22, 0x80	; 128
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>

				break;
	}
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <MotorDC_Dir>:


void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	28 97       	sbiw	r28, 0x08	; 8
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
	switch(en_motor_number)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	38 87       	std	Y+8, r19	; 0x08
    1886:	2f 83       	std	Y+7, r18	; 0x07
    1888:	8f 81       	ldd	r24, Y+7	; 0x07
    188a:	98 85       	ldd	r25, Y+8	; 0x08
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	31 f0       	breq	.+12     	; 0x189c <MotorDC_Dir+0x36>
    1890:	2f 81       	ldd	r18, Y+7	; 0x07
    1892:	38 85       	ldd	r19, Y+8	; 0x08
    1894:	21 30       	cpi	r18, 0x01	; 1
    1896:	31 05       	cpc	r19, r1
    1898:	b1 f1       	breq	.+108    	; 0x1906 <MotorDC_Dir+0xa0>
    189a:	68 c0       	rjmp	.+208    	; 0x196c <MotorDC_Dir+0x106>
	{
		case(MOT_1):
				switch(en_motor_dir)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3e 83       	std	Y+6, r19	; 0x06
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	a9 f0       	breq	.+42     	; 0x18da <MotorDC_Dir+0x74>
    18b0:	2d 81       	ldd	r18, Y+5	; 0x05
    18b2:	3e 81       	ldd	r19, Y+6	; 0x06
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	d9 f0       	breq	.+54     	; 0x18f0 <MotorDC_Dir+0x8a>
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <MotorDC_Dir+0x5e>
    18c2:	54 c0       	rjmp	.+168    	; 0x196c <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	68 e0       	ldi	r22, 0x08	; 8
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    18d8:	49 c0       	rjmp	.+146    	; 0x196c <MotorDC_Dir+0x106>

						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	64 e0       	ldi	r22, 0x04	; 4
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,MOTOR_OUT_1B_BIT);
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	68 e0       	ldi	r22, 0x08	; 8
    18e8:	48 e0       	ldi	r20, 0x08	; 8
    18ea:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    18ee:	3e c0       	rjmp	.+124    	; 0x196c <MotorDC_Dir+0x106>
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,MOTOR_OUT_1A_BIT);
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	64 e0       	ldi	r22, 0x04	; 4
    18f4:	44 e0       	ldi	r20, 0x04	; 4
    18f6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	68 e0       	ldi	r22, 0x08	; 8
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    1904:	33 c0       	rjmp	.+102    	; 0x196c <MotorDC_Dir+0x106>
				}

				break;

		case(MOT_2):
				switch(en_motor_dir)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	a1 f0       	breq	.+40     	; 0x1942 <MotorDC_Dir+0xdc>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	d1 f0       	breq	.+52     	; 0x1958 <MotorDC_Dir+0xf2>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	01 f5       	brne	.+64     	; 0x196c <MotorDC_Dir+0x106>
				{
				case(STOP):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	60 e4       	ldi	r22, 0x40	; 64
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1936:	83 e0       	ldi	r24, 0x03	; 3
    1938:	60 e8       	ldi	r22, 0x80	; 128
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    1940:	15 c0       	rjmp	.+42     	; 0x196c <MotorDC_Dir+0x106>
						break;
				case(FORWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	60 e4       	ldi	r22, 0x40	; 64
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,MOTOR_OUT_2B_BIT);
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	60 e8       	ldi	r22, 0x80	; 128
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    1956:	0a c0       	rjmp	.+20     	; 0x196c <MotorDC_Dir+0x106>
						break;
				case(BACKWARD):
						gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,MOTOR_OUT_2A_BIT);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	60 e4       	ldi	r22, 0x40	; 64
    195c:	40 e4       	ldi	r20, 0x40	; 64
    195e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	60 e8       	ldi	r22, 0x80	; 128
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
						break;
				}
	}
}
    196c:	28 96       	adiw	r28, 0x08	; 8
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <MotorDC_Speed_PollingWithT0>:


void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed,T0_SW_FREQUENCY_61HZ);
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	65 e0       	ldi	r22, 0x05	; 5
    198e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <timer0SwPWM>
}
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <MotorDC_Speed_HwPWM>:


void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
	timer1HwPWM_PhaseCorrect(u8_motor_speed,T1_PHASE_CORRECT_FREQUENCY_400HZ);
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	0e 94 c1 18 	call	0x3182	; 0x3182 <timer1HwPWM_PhaseCorrect>
}
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <gpioPortDirection>:
#include "gpio.h"
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <gpioPortDirection+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <gpioPortDirection+0x8>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	d1 f0       	breq	.+52     	; 0x1a0e <gpioPortDirection+0x58>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <gpioPortDirection+0x38>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <gpioPortDirection+0x4e>
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <gpioPortDirection+0x74>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <gpioPortDirection+0x62>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <gpioPortDirection+0x6c>
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <gpioPortDirection+0x74>
	{
	case 0:
			PORTA_DIR=u8_direction;
    1a04:	ea e3       	ldi	r30, 0x3A	; 58
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <gpioPortDirection+0x74>
		break;

	case 1:
			PORTB_DIR=u8_direction;
    1a0e:	e7 e3       	ldi	r30, 0x37	; 55
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <gpioPortDirection+0x74>
			break;
	case 2:
			PORTC_DIR=u8_direction;
    1a18:	e4 e3       	ldi	r30, 0x34	; 52
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <gpioPortDirection+0x74>
		break;

	case 3:
			PORTD_DIR=u8_direction;
    1a22:	e1 e3       	ldi	r30, 0x31	; 49
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
		break;

	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <gpioPortWrite>:


void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <gpioPortWrite+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <gpioPortWrite+0x8>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3c 83       	std	Y+4, r19	; 0x04
    1a50:	2b 83       	std	Y+3, r18	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	d1 f0       	breq	.+52     	; 0x1a90 <gpioPortWrite+0x58>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <gpioPortWrite+0x38>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <gpioPortWrite+0x4e>
    1a6e:	1e c0       	rjmp	.+60     	; 0x1aac <gpioPortWrite+0x74>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	81 f0       	breq	.+32     	; 0x1a9a <gpioPortWrite+0x62>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <gpioPortWrite+0x6c>
    1a84:	13 c0       	rjmp	.+38     	; 0x1aac <gpioPortWrite+0x74>
	{
	case 0:
			PORTA_DATA=u8_value;
    1a86:	eb e3       	ldi	r30, 0x3B	; 59
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	80 83       	st	Z, r24
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <gpioPortWrite+0x74>

		break;

	case 1:
			PORTB_DATA=u8_value;
    1a90:	e8 e3       	ldi	r30, 0x38	; 56
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <gpioPortWrite+0x74>
		break;

	case 2:
			PORTC_DATA=u8_value;
    1a9a:	e5 e3       	ldi	r30, 0x35	; 53
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	80 83       	st	Z, r24
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <gpioPortWrite+0x74>
		break;

	case 3:
			PORTD_DATA=u8_value;
    1aa4:	e2 e3       	ldi	r30, 0x32	; 50
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	80 83       	st	Z, r24
		break;

	}
}
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <gpioPortToggle+0x6>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_port)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3b 83       	std	Y+3, r19	; 0x03
    1ad0:	2a 83       	std	Y+2, r18	; 0x02
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	e9 f0       	breq	.+58     	; 0x1b16 <gpioPortToggle+0x5c>
    1adc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ade:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <gpioPortToggle+0x36>
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	61 f0       	breq	.+24     	; 0x1b06 <gpioPortToggle+0x4c>
    1aee:	2a c0       	rjmp	.+84     	; 0x1b44 <gpioPortToggle+0x8a>
    1af0:	2a 81       	ldd	r18, Y+2	; 0x02
    1af2:	3b 81       	ldd	r19, Y+3	; 0x03
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	b1 f0       	breq	.+44     	; 0x1b26 <gpioPortToggle+0x6c>
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	91 05       	cpc	r25, r1
    1b02:	c9 f0       	breq	.+50     	; 0x1b36 <gpioPortToggle+0x7c>
    1b04:	1f c0       	rjmp	.+62     	; 0x1b44 <gpioPortToggle+0x8a>
	{
	case 0:
		PORTA_DATA ^= HIGH;
    1b06:	ab e3       	ldi	r26, 0x3B	; 59
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 95       	com	r24
    1b12:	8c 93       	st	X, r24
    1b14:	17 c0       	rjmp	.+46     	; 0x1b44 <gpioPortToggle+0x8a>
		break;

	case 1:
		PORTB_DATA ^= HIGH;
    1b16:	a8 e3       	ldi	r26, 0x38	; 56
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e8 e3       	ldi	r30, 0x38	; 56
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 95       	com	r24
    1b22:	8c 93       	st	X, r24
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <gpioPortToggle+0x8a>
		break;

	case 2:
		PORTC_DATA ^= HIGH;
    1b26:	a5 e3       	ldi	r26, 0x35	; 53
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e3       	ldi	r30, 0x35	; 53
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 95       	com	r24
    1b32:	8c 93       	st	X, r24
    1b34:	07 c0       	rjmp	.+14     	; 0x1b44 <gpioPortToggle+0x8a>
		break;

	case 3:
		PORTD_DATA ^= HIGH;
    1b36:	a2 e3       	ldi	r26, 0x32	; 50
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 95       	com	r24
    1b42:	8c 93       	st	X, r24
		break;

	}
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <gpioPortRead+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <gpioPortRead+0x8>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	switch(u8_port)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <gpioPortRead+0x56>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <gpioPortRead+0x36>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <gpioPortRead+0x4c>
    1b84:	1e c0       	rjmp	.+60     	; 0x1bc2 <gpioPortRead+0x72>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <gpioPortRead+0x60>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <gpioPortRead+0x6a>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <gpioPortRead+0x72>
	{
	case 0:
		data=PORTA_PIN;
    1b9c:	e9 e3       	ldi	r30, 0x39	; 57
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <gpioPortRead+0x72>
		break;

	case 1:
		data=PORTB_PIN;
    1ba6:	e6 e3       	ldi	r30, 0x36	; 54
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <gpioPortRead+0x72>
		break;

	case 2:
		data=PORTC_PIN;
    1bb0:	e3 e3       	ldi	r30, 0x33	; 51
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <gpioPortRead+0x72>
		break;
	case 3:
		data=PORTD_PIN;
    1bba:	e0 e3       	ldi	r30, 0x30	; 48
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return data;
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <gpioPinDirection+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <gpioPinDirection+0x8>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	6a 83       	std	Y+2, r22	; 0x02
    1be4:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3d 83       	std	Y+5, r19	; 0x05
    1bee:	2c 83       	std	Y+4, r18	; 0x04
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	69 f1       	breq	.+90     	; 0x1c54 <gpioPinDirection+0x82>
    1bfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <gpioPinDirection+0x3c>
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f0       	breq	.+26     	; 0x1c26 <gpioPinDirection+0x54>
    1c0c:	67 c0       	rjmp	.+206    	; 0x1cdc <gpioPinDirection+0x10a>
    1c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c10:	3d 81       	ldd	r19, Y+5	; 0x05
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	a9 f1       	breq	.+106    	; 0x1c82 <gpioPinDirection+0xb0>
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <gpioPinDirection+0x52>
    1c22:	46 c0       	rjmp	.+140    	; 0x1cb0 <gpioPinDirection+0xde>
    1c24:	5b c0       	rjmp	.+182    	; 0x1cdc <gpioPinDirection+0x10a>
	{
	case 0:
		if(u8_direction == INPUT)
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	88 23       	and	r24, r24
    1c2a:	59 f4       	brne	.+22     	; 0x1c42 <gpioPinDirection+0x70>
		{
			PORTA_DIR &= ~(u8_pins);
    1c2c:	aa e3       	ldi	r26, 0x3A	; 58
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ea e3       	ldi	r30, 0x3A	; 58
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	98 2f       	mov	r25, r24
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	80 95       	com	r24
    1c3c:	89 23       	and	r24, r25
    1c3e:	8c 93       	st	X, r24
    1c40:	4d c0       	rjmp	.+154    	; 0x1cdc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTA_DIR |= u8_pins;
    1c42:	aa e3       	ldi	r26, 0x3A	; 58
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ea e3       	ldi	r30, 0x3A	; 58
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	90 81       	ld	r25, Z
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	89 2b       	or	r24, r25
    1c50:	8c 93       	st	X, r24
    1c52:	44 c0       	rjmp	.+136    	; 0x1cdc <gpioPinDirection+0x10a>
		}
		break;

	case 1:
		if(u8_direction == INPUT)
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	88 23       	and	r24, r24
    1c58:	59 f4       	brne	.+22     	; 0x1c70 <gpioPinDirection+0x9e>
		{
			PORTB_DIR &= ~(u8_pins);
    1c5a:	a7 e3       	ldi	r26, 0x37	; 55
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e7 e3       	ldi	r30, 0x37	; 55
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	98 2f       	mov	r25, r24
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	80 95       	com	r24
    1c6a:	89 23       	and	r24, r25
    1c6c:	8c 93       	st	X, r24
    1c6e:	36 c0       	rjmp	.+108    	; 0x1cdc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTB_DIR |= u8_pins;
    1c70:	a7 e3       	ldi	r26, 0x37	; 55
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e7 e3       	ldi	r30, 0x37	; 55
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	90 81       	ld	r25, Z
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	89 2b       	or	r24, r25
    1c7e:	8c 93       	st	X, r24
    1c80:	2d c0       	rjmp	.+90     	; 0x1cdc <gpioPinDirection+0x10a>
		}
		break;
	case 2:
		if(u8_direction == INPUT)
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	88 23       	and	r24, r24
    1c86:	59 f4       	brne	.+22     	; 0x1c9e <gpioPinDirection+0xcc>
		{
			PORTC_DIR &= ~(u8_pins);
    1c88:	a4 e3       	ldi	r26, 0x34	; 52
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e4 e3       	ldi	r30, 0x34	; 52
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	98 2f       	mov	r25, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	80 95       	com	r24
    1c98:	89 23       	and	r24, r25
    1c9a:	8c 93       	st	X, r24
    1c9c:	1f c0       	rjmp	.+62     	; 0x1cdc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTC_DIR |= u8_pins;
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	90 81       	ld	r25, Z
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	89 2b       	or	r24, r25
    1cac:	8c 93       	st	X, r24
    1cae:	16 c0       	rjmp	.+44     	; 0x1cdc <gpioPinDirection+0x10a>
		}
		break;

	case 3:
		if(u8_direction == INPUT)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	88 23       	and	r24, r24
    1cb4:	59 f4       	brne	.+22     	; 0x1ccc <gpioPinDirection+0xfa>
		{
			PORTD_DIR &= ~(u8_pins);
    1cb6:	a1 e3       	ldi	r26, 0x31	; 49
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e1 e3       	ldi	r30, 0x31	; 49
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	80 95       	com	r24
    1cc6:	89 23       	and	r24, r25
    1cc8:	8c 93       	st	X, r24
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <gpioPinDirection+0x10a>
		}
		else
		{
			PORTD_DIR |= u8_pins;
    1ccc:	a1 e3       	ldi	r26, 0x31	; 49
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e1 e3       	ldi	r30, 0x31	; 49
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	90 81       	ld	r25, Z
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	89 2b       	or	r24, r25
    1cda:	8c 93       	st	X, r24
		}
		break;

	}
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <gpioPinWrite>:
 * example: gpioPinWrite(PORTA_DATA, BIT3,BIT3);
 * to write 0 send LOW as u8_value and pins numbers as u8_pins
 * example: gpioPinWrite(PORTA_DATA, BIT3,LOW);
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <gpioPinWrite+0x6>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <gpioPinWrite+0x8>
    1cf4:	0f 92       	push	r0
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6a 83       	std	Y+2, r22	; 0x02
    1cfe:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8_port)
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3d 83       	std	Y+5, r19	; 0x05
    1d08:	2c 83       	std	Y+4, r18	; 0x04
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	41 f1       	breq	.+80     	; 0x1d64 <gpioPinWrite+0x78>
    1d14:	2c 81       	ldd	r18, Y+4	; 0x04
    1d16:	3d 81       	ldd	r19, Y+5	; 0x05
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <gpioPinWrite+0x3c>
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	61 f0       	breq	.+24     	; 0x1d3e <gpioPinWrite+0x52>
    1d26:	56 c0       	rjmp	.+172    	; 0x1dd4 <gpioPinWrite+0xe8>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	61 f1       	breq	.+88     	; 0x1d8a <gpioPinWrite+0x9e>
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	91 05       	cpc	r25, r1
    1d3a:	d1 f1       	breq	.+116    	; 0x1db0 <gpioPinWrite+0xc4>
    1d3c:	4b c0       	rjmp	.+150    	; 0x1dd4 <gpioPinWrite+0xe8>
	{
	case 0:
			PORTA_DATA &= ~(u8_pins);
    1d3e:	ab e3       	ldi	r26, 0x3B	; 59
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	eb e3       	ldi	r30, 0x3B	; 59
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	98 2f       	mov	r25, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 95       	com	r24
    1d4e:	89 23       	and	r24, r25
    1d50:	8c 93       	st	X, r24
			PORTA_DATA |= u8_value;
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	90 81       	ld	r25, Z
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	89 2b       	or	r24, r25
    1d60:	8c 93       	st	X, r24
    1d62:	38 c0       	rjmp	.+112    	; 0x1dd4 <gpioPinWrite+0xe8>

		break;

	case 1:
			PORTB_DATA &= ~(u8_pins);
    1d64:	a8 e3       	ldi	r26, 0x38	; 56
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 e3       	ldi	r30, 0x38	; 56
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	98 2f       	mov	r25, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 95       	com	r24
    1d74:	89 23       	and	r24, r25
    1d76:	8c 93       	st	X, r24
			PORTB_DATA |= u8_value;
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	90 81       	ld	r25, Z
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	89 2b       	or	r24, r25
    1d86:	8c 93       	st	X, r24
    1d88:	25 c0       	rjmp	.+74     	; 0x1dd4 <gpioPinWrite+0xe8>
		break;

	case 2:
			PORTC_DATA &= ~(u8_pins);
    1d8a:	a5 e3       	ldi	r26, 0x35	; 53
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e5 e3       	ldi	r30, 0x35	; 53
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	98 2f       	mov	r25, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	80 95       	com	r24
    1d9a:	89 23       	and	r24, r25
    1d9c:	8c 93       	st	X, r24
			PORTC_DATA |= u8_value;
    1d9e:	a5 e3       	ldi	r26, 0x35	; 53
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e3       	ldi	r30, 0x35	; 53
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	90 81       	ld	r25, Z
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	89 2b       	or	r24, r25
    1dac:	8c 93       	st	X, r24
    1dae:	12 c0       	rjmp	.+36     	; 0x1dd4 <gpioPinWrite+0xe8>
		break;

	case 3:
			PORTD_DATA &= ~(u8_pins);
    1db0:	a2 e3       	ldi	r26, 0x32	; 50
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e2 e3       	ldi	r30, 0x32	; 50
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	98 2f       	mov	r25, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	80 95       	com	r24
    1dc0:	89 23       	and	r24, r25
    1dc2:	8c 93       	st	X, r24
			PORTD_DATA |= u8_value;
    1dc4:	a2 e3       	ldi	r26, 0x32	; 50
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e2 e3       	ldi	r30, 0x32	; 50
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	90 81       	ld	r25, Z
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	89 2b       	or	r24, r25
    1dd2:	8c 93       	st	X, r24
		break;

	}
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <gpioPinToggle+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <gpioPinToggle+0x8>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	3c 83       	std	Y+4, r19	; 0x04
    1dfc:	2b 83       	std	Y+3, r18	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 05       	cpc	r25, r1
    1e06:	f1 f0       	breq	.+60     	; 0x1e44 <gpioPinToggle+0x60>
    1e08:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0c:	22 30       	cpi	r18, 0x02	; 2
    1e0e:	31 05       	cpc	r19, r1
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <gpioPinToggle+0x38>
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	61 f0       	breq	.+24     	; 0x1e32 <gpioPinToggle+0x4e>
    1e1a:	2e c0       	rjmp	.+92     	; 0x1e78 <gpioPinToggle+0x94>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	22 30       	cpi	r18, 0x02	; 2
    1e22:	31 05       	cpc	r19, r1
    1e24:	c1 f0       	breq	.+48     	; 0x1e56 <gpioPinToggle+0x72>
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	83 30       	cpi	r24, 0x03	; 3
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	e1 f0       	breq	.+56     	; 0x1e68 <gpioPinToggle+0x84>
    1e30:	23 c0       	rjmp	.+70     	; 0x1e78 <gpioPinToggle+0x94>
	{
	case 0:
			PORTA_DATA ^= u8_pins;
    1e32:	ab e3       	ldi	r26, 0x3B	; 59
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	eb e3       	ldi	r30, 0x3B	; 59
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	90 81       	ld	r25, Z
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	89 27       	eor	r24, r25
    1e40:	8c 93       	st	X, r24
    1e42:	1a c0       	rjmp	.+52     	; 0x1e78 <gpioPinToggle+0x94>
		break;

	case 1:
			PORTB_DATA ^= (u8_pins);
    1e44:	a8 e3       	ldi	r26, 0x38	; 56
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e3       	ldi	r30, 0x38	; 56
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	90 81       	ld	r25, Z
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	89 27       	eor	r24, r25
    1e52:	8c 93       	st	X, r24
    1e54:	11 c0       	rjmp	.+34     	; 0x1e78 <gpioPinToggle+0x94>
		break;
	case 2:
			PORTC_DATA ^= (u8_pins);
    1e56:	a5 e3       	ldi	r26, 0x35	; 53
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e3       	ldi	r30, 0x35	; 53
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	90 81       	ld	r25, Z
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	89 27       	eor	r24, r25
    1e64:	8c 93       	st	X, r24
    1e66:	08 c0       	rjmp	.+16     	; 0x1e78 <gpioPinToggle+0x94>
		break;

	case 3:
			PORTD_DATA ^= (u8_pins);
    1e68:	a2 e3       	ldi	r26, 0x32	; 50
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e2 e3       	ldi	r30, 0x32	; 50
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	90 81       	ld	r25, Z
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	89 27       	eor	r24, r25
    1e76:	8c 93       	st	X, r24
		break;

	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <gpioPinRead+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <gpioPinRead+0x8>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t data;
	switch(u8_port)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3d 83       	std	Y+5, r19	; 0x05
    1ea0:	2c 83       	std	Y+4, r18	; 0x04
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	e1 f0       	breq	.+56     	; 0x1ee4 <gpioPinRead+0x5e>
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <gpioPinRead+0x3a>
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <gpioPinRead+0x50>
    1ebe:	26 c0       	rjmp	.+76     	; 0x1f0c <gpioPinRead+0x86>
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	a1 f0       	breq	.+40     	; 0x1ef2 <gpioPinRead+0x6c>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	b1 f0       	breq	.+44     	; 0x1f00 <gpioPinRead+0x7a>
    1ed4:	1b c0       	rjmp	.+54     	; 0x1f0c <gpioPinRead+0x86>
	{
	case 0:
		data= (PORTA_PIN & u8_pin);
    1ed6:	e9 e3       	ldi	r30, 0x39	; 57
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	90 81       	ld	r25, Z
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	89 23       	and	r24, r25
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <gpioPinRead+0x86>
		break;

	case 1:
		data= (PORTB_PIN & u8_pin);
    1ee4:	e6 e3       	ldi	r30, 0x36	; 54
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	90 81       	ld	r25, Z
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	89 23       	and	r24, r25
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	0d c0       	rjmp	.+26     	; 0x1f0c <gpioPinRead+0x86>
		break;

	case 2:
		data= (PORTC_PIN & u8_pin);
    1ef2:	e3 e3       	ldi	r30, 0x33	; 51
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	90 81       	ld	r25, Z
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	89 23       	and	r24, r25
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <gpioPinRead+0x86>
		break;
	case 3:
		data= (PORTD_PIN & u8_pin);
    1f00:	e0 e3       	ldi	r30, 0x30	; 48
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	90 81       	ld	r25, Z
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	89 23       	and	r24, r25
    1f0a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(data!=LOW)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 23       	and	r24, r24
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <gpioPinRead+0x90>
	{
		data=HIGH;
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <INT0_Init>:
uint8_t g8_state;
uint8_t g8_interrupt_zero_flag=0;

/************************INT0*****************************************/
void INT0_Init(EN_Edge_t en_edge_selection)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <INT0_Init+0x6>
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    1f36:	f8 94       	cli
	GICR  |= (1<<INT0);                 /* Enable external interrupt pin INT0*/
    1f38:	ab e5       	ldi	r26, 0x5B	; 91
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	eb e5       	ldi	r30, 0x5B	; 91
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	80 64       	ori	r24, 0x40	; 64
    1f44:	8c 93       	st	X, r24
	gpioPinDirection(GPIOD,BIT2,INPUT);  /*set INT0 pin as input */
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	64 e0       	ldi	r22, 0x04	; 4
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
	switch(en_edge_selection)
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3b 83       	std	Y+3, r19	; 0x03
    1f58:	2a 83       	std	Y+2, r18	; 0x02
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	81 f0       	breq	.+32     	; 0x1f84 <INT0_Init+0x5c>
    1f64:	2a 81       	ldd	r18, Y+2	; 0x02
    1f66:	3b 81       	ldd	r19, Y+3	; 0x03
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	14 f1       	brlt	.+68     	; 0x1fb2 <INT0_Init+0x8a>
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	91 05       	cpc	r25, r1
    1f76:	71 f0       	breq	.+28     	; 0x1f94 <INT0_Init+0x6c>
    1f78:	2a 81       	ldd	r18, Y+2	; 0x02
    1f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f7c:	23 30       	cpi	r18, 0x03	; 3
    1f7e:	31 05       	cpc	r19, r1
    1f80:	89 f0       	breq	.+34     	; 0x1fa4 <INT0_Init+0x7c>
    1f82:	17 c0       	rjmp	.+46     	; 0x1fb2 <INT0_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    1f84:	a5 e5       	ldi	r26, 0x55	; 85
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e5       	ldi	r30, 0x55	; 85
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	8c 93       	st	X, r24
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <INT0_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    1f94:	a5 e5       	ldi	r26, 0x55	; 85
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e5       	ldi	r30, 0x55	; 85
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	81 60       	ori	r24, 0x01	; 1
    1fa0:	8c 93       	st	X, r24
    1fa2:	07 c0       	rjmp	.+14     	; 0x1fb2 <INT0_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    1fa4:	a5 e5       	ldi	r26, 0x55	; 85
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e5       	ldi	r30, 0x55	; 85
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	83 60       	ori	r24, 0x03	; 3
    1fb0:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1fb2:	78 94       	sei
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <INT0_DeInit>:


void INT0_DeInit(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    1fc8:	f8 94       	cli
	GICR  &= ~(1<<INT0);                 /* Disable external interrupt pin INT0*/
    1fca:	ab e5       	ldi	r26, 0x5B	; 91
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb e5       	ldi	r30, 0x5B	; 91
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 7b       	andi	r24, 0xBF	; 191
    1fd6:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    1fd8:	a5 e5       	ldi	r26, 0x55	; 85
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e5 e5       	ldi	r30, 0x55	; 85
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8c 7f       	andi	r24, 0xFC	; 252
    1fe4:	8c 93       	st	X, r24
}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <INT1_Init>:

/****************************INT1*******************************************/
void INT1_Init(EN_Edge_t en_edge_selection)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <INT1_Init+0x6>
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    1ffa:	f8 94       	cli
	GICR  |= (1<<INT1);                 /* Enable external interrupt pin INT1*/
    1ffc:	ab e5       	ldi	r26, 0x5B	; 91
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	eb e5       	ldi	r30, 0x5B	; 91
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	80 68       	ori	r24, 0x80	; 128
    2008:	8c 93       	st	X, r24
	gpioPinDirection(GPIOD,BIT3,INPUT); /*set INT1 pin as input*/
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	68 e0       	ldi	r22, 0x08	; 8
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
	switch(en_edge_selection)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3b 83       	std	Y+3, r19	; 0x03
    201c:	2a 83       	std	Y+2, r18	; 0x02
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <INT1_Init+0x5c>
    2028:	2a 81       	ldd	r18, Y+2	; 0x02
    202a:	3b 81       	ldd	r19, Y+3	; 0x03
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	14 f1       	brlt	.+68     	; 0x2076 <INT1_Init+0x8a>
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	91 05       	cpc	r25, r1
    203a:	71 f0       	breq	.+28     	; 0x2058 <INT1_Init+0x6c>
    203c:	2a 81       	ldd	r18, Y+2	; 0x02
    203e:	3b 81       	ldd	r19, Y+3	; 0x03
    2040:	23 30       	cpi	r18, 0x03	; 3
    2042:	31 05       	cpc	r19, r1
    2044:	89 f0       	breq	.+34     	; 0x2068 <INT1_Init+0x7c>
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <INT1_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    2048:	a5 e5       	ldi	r26, 0x55	; 85
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e5       	ldi	r30, 0x55	; 85
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	84 60       	ori	r24, 0x04	; 4
    2054:	8c 93       	st	X, r24
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <INT1_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    2058:	a5 e5       	ldi	r26, 0x55	; 85
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e5       	ldi	r30, 0x55	; 85
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	81 60       	ori	r24, 0x01	; 1
    2064:	8c 93       	st	X, r24
    2066:	07 c0       	rjmp	.+14     	; 0x2076 <INT1_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    2068:	a5 e5       	ldi	r26, 0x55	; 85
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e5 e5       	ldi	r30, 0x55	; 85
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	83 60       	ori	r24, 0x03	; 3
    2074:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    2076:	78 94       	sei
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <INT1_DeInit>:

void INT1_DeInit(void)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    208c:	f8 94       	cli
	GICR  &= ~(1<<INT1);                 /* Disable external interrupt pin INT0*/
    208e:	ab e5       	ldi	r26, 0x5B	; 91
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	eb e5       	ldi	r30, 0x5B	; 91
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 77       	andi	r24, 0x7F	; 127
    209a:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    209c:	a5 e5       	ldi	r26, 0x55	; 85
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e5       	ldi	r30, 0x55	; 85
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	8c 7f       	andi	r24, 0xFC	; 252
    20a8:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    20aa:	78 94       	sei
}
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <INT2_Init>:

/****************************INT2*******************************************/
void INT2_Init(EN_Edge_t en_edge_selection)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <INT2_Init+0x6>
    20b8:	0f 92       	push	r0
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	89 83       	std	Y+1, r24	; 0x01
	cli();                              /*Disable interrupts by clearing I-bit*/
    20c0:	f8 94       	cli
	GICR  |= (1<<INT2);                 /* Enable external interrupt pin INT1*/
    20c2:	ab e5       	ldi	r26, 0x5B	; 91
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e5       	ldi	r30, 0x5B	; 91
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	8c 93       	st	X, r24
	gpioPinDirection(GPIOB,BIT2,INPUT); /*set INT2 pin as input*/
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	64 e0       	ldi	r22, 0x04	; 4
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
	switch(en_edge_selection)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3b 83       	std	Y+3, r19	; 0x03
    20e2:	2a 83       	std	Y+2, r18	; 0x02
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	81 f0       	breq	.+32     	; 0x210e <INT2_Init+0x5c>
    20ee:	2a 81       	ldd	r18, Y+2	; 0x02
    20f0:	3b 81       	ldd	r19, Y+3	; 0x03
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	14 f1       	brlt	.+68     	; 0x213c <INT2_Init+0x8a>
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	91 05       	cpc	r25, r1
    2100:	71 f0       	breq	.+28     	; 0x211e <INT2_Init+0x6c>
    2102:	2a 81       	ldd	r18, Y+2	; 0x02
    2104:	3b 81       	ldd	r19, Y+3	; 0x03
    2106:	23 30       	cpi	r18, 0x03	; 3
    2108:	31 05       	cpc	r19, r1
    210a:	89 f0       	breq	.+34     	; 0x212e <INT2_Init+0x7c>
    210c:	17 c0       	rjmp	.+46     	; 0x213c <INT2_Init+0x8a>
	case LOW_LEVEL:
								/* Trigger INT0 with the low level*/
		break;

	case ANY_CHANGE:
		MCUCR |= (1<<ISC10);   /* Trigger INT0 with the any change*/
    210e:	a5 e5       	ldi	r26, 0x55	; 85
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e5 e5       	ldi	r30, 0x55	; 85
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	84 60       	ori	r24, 0x04	; 4
    211a:	8c 93       	st	X, r24
    211c:	0f c0       	rjmp	.+30     	; 0x213c <INT2_Init+0x8a>
		break;

	case FALLING_EDGE:
		MCUCR |= (1<<ISC00);   /* Trigger INT0 with the falling edge*/
    211e:	a5 e5       	ldi	r26, 0x55	; 85
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e5       	ldi	r30, 0x55	; 85
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	8c 93       	st	X, r24
    212c:	07 c0       	rjmp	.+14     	; 0x213c <INT2_Init+0x8a>
		break;

	case RISIGING_EDGE:
		MCUCR |= (1<<ISC00) | (1<<ISC01);   /* Trigger INT0 with the raising edge*/
    212e:	a5 e5       	ldi	r26, 0x55	; 85
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e5       	ldi	r30, 0x55	; 85
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	83 60       	ori	r24, 0x03	; 3
    213a:	8c 93       	st	X, r24
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    213c:	78 94       	sei
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <INT2_DeInit>:

void INT2_DeInit(void)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
	cli();                              /*Disable interrupts by clearing I-bit*/
    2152:	f8 94       	cli
	GICR  &= ~(1<<INT2);                 /* Disable external interrupt pin INT0*/
    2154:	ab e5       	ldi	r26, 0x5B	; 91
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	eb e5       	ldi	r30, 0x5B	; 91
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8f 7d       	andi	r24, 0xDF	; 223
    2160:	8c 93       	st	X, r24
	MCUCR &= ~(1<<ISC00) & ~(1<<ISC01);
    2162:	a5 e5       	ldi	r26, 0x55	; 85
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e5 e5       	ldi	r30, 0x55	; 85
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	8c 7f       	andi	r24, 0xFC	; 252
    216e:	8c 93       	st	X, r24
	sei();                              /*Enable interrupts by setting I-bit*/
    2170:	78 94       	sei
}
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <Led_Init>:
#include "led.h"
void Led_Init(En_LedNumber_t en_led_id)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <Led_Init+0x6>
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3b 83       	std	Y+3, r19	; 0x03
    218e:	2a 83       	std	Y+2, r18	; 0x02
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	91 05       	cpc	r25, r1
    2198:	01 f1       	breq	.+64     	; 0x21da <Led_Init+0x62>
    219a:	2a 81       	ldd	r18, Y+2	; 0x02
    219c:	3b 81       	ldd	r19, Y+3	; 0x03
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	2c f4       	brge	.+10     	; 0x21ae <Led_Init+0x36>
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <Led_Init+0x4c>
    21ac:	36 c0       	rjmp	.+108    	; 0x221a <Led_Init+0xa2>
    21ae:	2a 81       	ldd	r18, Y+2	; 0x02
    21b0:	3b 81       	ldd	r19, Y+3	; 0x03
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	e1 f0       	breq	.+56     	; 0x21f0 <Led_Init+0x78>
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	83 30       	cpi	r24, 0x03	; 3
    21be:	91 05       	cpc	r25, r1
    21c0:	11 f1       	breq	.+68     	; 0x2206 <Led_Init+0x8e>
    21c2:	2b c0       	rjmp	.+86     	; 0x221a <Led_Init+0xa2>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	60 e1       	ldi	r22, 0x10	; 16
    21c8:	4f ef       	ldi	r20, 0xFF	; 255
    21ca:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	60 e1       	ldi	r22, 0x10	; 16
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    21d8:	20 c0       	rjmp	.+64     	; 0x221a <Led_Init+0xa2>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	60 e2       	ldi	r22, 0x20	; 32
    21de:	4f ef       	ldi	r20, 0xFF	; 255
    21e0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	60 e2       	ldi	r22, 0x20	; 32
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    21ee:	15 c0       	rjmp	.+42     	; 0x221a <Led_Init+0xa2>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	60 e4       	ldi	r22, 0x40	; 64
    21f4:	4f ef       	ldi	r20, 0xFF	; 255
    21f6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	60 e4       	ldi	r22, 0x40	; 64
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2204:	0a c0       	rjmp	.+20     	; 0x221a <Led_Init+0xa2>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	60 e8       	ldi	r22, 0x80	; 128
    220a:	4f ef       	ldi	r20, 0xFF	; 255
    220c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	60 e8       	ldi	r22, 0x80	; 128
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;

	}
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <Led_On+0x6>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	3b 83       	std	Y+3, r19	; 0x03
    223c:	2a 83       	std	Y+2, r18	; 0x02
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	d9 f0       	breq	.+54     	; 0x227e <Led_On+0x58>
    2248:	2a 81       	ldd	r18, Y+2	; 0x02
    224a:	3b 81       	ldd	r19, Y+3	; 0x03
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	2c f4       	brge	.+10     	; 0x225c <Led_On+0x36>
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	9b 81       	ldd	r25, Y+3	; 0x03
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	61 f0       	breq	.+24     	; 0x2272 <Led_On+0x4c>
    225a:	22 c0       	rjmp	.+68     	; 0x22a0 <Led_On+0x7a>
    225c:	2a 81       	ldd	r18, Y+2	; 0x02
    225e:	3b 81       	ldd	r19, Y+3	; 0x03
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	31 05       	cpc	r19, r1
    2264:	91 f0       	breq	.+36     	; 0x228a <Led_On+0x64>
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	83 30       	cpi	r24, 0x03	; 3
    226c:	91 05       	cpc	r25, r1
    226e:	99 f0       	breq	.+38     	; 0x2296 <Led_On+0x70>
    2270:	17 c0       	rjmp	.+46     	; 0x22a0 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LED_0_BIT);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	60 e1       	ldi	r22, 0x10	; 16
    2276:	40 e1       	ldi	r20, 0x10	; 16
    2278:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    227c:	11 c0       	rjmp	.+34     	; 0x22a0 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LED_1_BIT);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	60 e2       	ldi	r22, 0x20	; 32
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2288:	0b c0       	rjmp	.+22     	; 0x22a0 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LED_2_BIT);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	60 e4       	ldi	r22, 0x40	; 64
    228e:	40 e4       	ldi	r20, 0x40	; 64
    2290:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2294:	05 c0       	rjmp	.+10     	; 0x22a0 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LED_3_BIT);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	60 e8       	ldi	r22, 0x80	; 128
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;

	}
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <Led_Off+0x6>
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
	switch(en_led_id)
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	3b 83       	std	Y+3, r19	; 0x03
    22c2:	2a 83       	std	Y+2, r18	; 0x02
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	d9 f0       	breq	.+54     	; 0x2304 <Led_Off+0x58>
    22ce:	2a 81       	ldd	r18, Y+2	; 0x02
    22d0:	3b 81       	ldd	r19, Y+3	; 0x03
    22d2:	22 30       	cpi	r18, 0x02	; 2
    22d4:	31 05       	cpc	r19, r1
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <Led_Off+0x36>
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	61 f0       	breq	.+24     	; 0x22f8 <Led_Off+0x4c>
    22e0:	22 c0       	rjmp	.+68     	; 0x2326 <Led_Off+0x7a>
    22e2:	2a 81       	ldd	r18, Y+2	; 0x02
    22e4:	3b 81       	ldd	r19, Y+3	; 0x03
    22e6:	22 30       	cpi	r18, 0x02	; 2
    22e8:	31 05       	cpc	r19, r1
    22ea:	91 f0       	breq	.+36     	; 0x2310 <Led_Off+0x64>
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	9b 81       	ldd	r25, Y+3	; 0x03
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	91 05       	cpc	r25, r1
    22f4:	99 f0       	breq	.+38     	; 0x231c <Led_Off+0x70>
    22f6:	17 c0       	rjmp	.+46     	; 0x2326 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	60 e1       	ldi	r22, 0x10	; 16
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2302:	11 c0       	rjmp	.+34     	; 0x2326 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	60 e2       	ldi	r22, 0x20	; 32
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    230e:	0b c0       	rjmp	.+22     	; 0x2326 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	60 e4       	ldi	r22, 0x40	; 64
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	60 e8       	ldi	r22, 0x80	; 128
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;

	}
}
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <Led_Toggle+0x6>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	89 83       	std	Y+1, r24	; 0x01
	gpioPinToggle(PORTB_DATA, en_led_id);
    2340:	e8 e3       	ldi	r30, 0x38	; 56
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	69 81       	ldd	r22, Y+1	; 0x01
    2348:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
	switch(en_led_id)
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	3b 83       	std	Y+3, r19	; 0x03
    2354:	2a 83       	std	Y+2, r18	; 0x02
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	91 05       	cpc	r25, r1
    235e:	d1 f0       	breq	.+52     	; 0x2394 <Led_Toggle+0x62>
    2360:	2a 81       	ldd	r18, Y+2	; 0x02
    2362:	3b 81       	ldd	r19, Y+3	; 0x03
    2364:	22 30       	cpi	r18, 0x02	; 2
    2366:	31 05       	cpc	r19, r1
    2368:	2c f4       	brge	.+10     	; 0x2374 <Led_Toggle+0x42>
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	61 f0       	breq	.+24     	; 0x238a <Led_Toggle+0x58>
    2372:	1e c0       	rjmp	.+60     	; 0x23b0 <Led_Toggle+0x7e>
    2374:	2a 81       	ldd	r18, Y+2	; 0x02
    2376:	3b 81       	ldd	r19, Y+3	; 0x03
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	81 f0       	breq	.+32     	; 0x239e <Led_Toggle+0x6c>
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	91 05       	cpc	r25, r1
    2386:	81 f0       	breq	.+32     	; 0x23a8 <Led_Toggle+0x76>
    2388:	13 c0       	rjmp	.+38     	; 0x23b0 <Led_Toggle+0x7e>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	60 e1       	ldi	r22, 0x10	; 16
    238e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
    2392:	0e c0       	rjmp	.+28     	; 0x23b0 <Led_Toggle+0x7e>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	60 e2       	ldi	r22, 0x20	; 32
    2398:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <Led_Toggle+0x7e>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	60 e4       	ldi	r22, 0x40	; 64
    23a2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <Led_Toggle+0x7e>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	60 e8       	ldi	r22, 0x80	; 128
    23ac:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <gpioPinToggle>
		break;

	}
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <main>:
#include "AGILE_REQ3.h"
#include "UART.h"

#define NULL_PTR ((void*)0)
int main(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	61 97       	sbiw	r28, 0x11	; 17
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
	*/


	/*************receiver************************/

	gpioPortDirection(GPIOB,OUTPUT);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	6f ef       	ldi	r22, 0xFF	; 255
    23d4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <gpioPortDirection>
	gpioPortWrite(GPIOB,LOW);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <gpioPortWrite>
	uint8_t num=0;
    23e0:	19 82       	std	Y+1, r1	; 0x01

	UART_Config_Structure uart_initialization_structure;

	uart_initialization_structure.Char_Size=USART_8_Bit_CHAR;
    23e2:	86 e0       	ldi	r24, 0x06	; 6
    23e4:	8e 83       	std	Y+6, r24	; 0x06
	uart_initialization_structure.Clk_Polarity_Mode=TX_RISING_RX_FALLING;
    23e6:	1d 82       	std	Y+5, r1	; 0x05
	uart_initialization_structure.Speed_Mode=USART_DOUBLE_SPEED;
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	8e 87       	std	Y+14, r24	; 0x0e
	uart_initialization_structure.Parity_Mode=USART_NO_PARITY;
    23ec:	1b 82       	std	Y+3, r1	; 0x03
	uart_initialization_structure.Stop_Bit_Mode=USART_1_STOPBIT;
    23ee:	1c 82       	std	Y+4, r1	; 0x04
	uart_initialization_structure.Receive_Mode=USART_RECIEVE_ENABLE;
    23f0:	80 e1       	ldi	r24, 0x10	; 16
    23f2:	8a 87       	std	Y+10, r24	; 0x0a
	uart_initialization_structure.Transmit_Mode=USART_TRANSMIT_ENABLE;
    23f4:	88 e0       	ldi	r24, 0x08	; 8
    23f6:	8b 87       	std	Y+11, r24	; 0x0b
	uart_initialization_structure.Double_Speed_Baud_Rate=BAUD9600;
    23f8:	8f ec       	ldi	r24, 0xCF	; 207
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	99 8b       	std	Y+17, r25	; 0x11
    23fe:	88 8b       	std	Y+16, r24	; 0x10


	UART_init(&uart_initialization_structure);
    2400:	ce 01       	movw	r24, r28
    2402:	02 96       	adiw	r24, 0x02	; 2
    2404:	0e 94 89 0a 	call	0x1512	; 0x1512 <UART_init>
	while(1)
	{
		num=UART_recieveByte();
    2408:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <UART_recieveByte>
    240c:	89 83       	std	Y+1, r24	; 0x01
		gpioPortWrite(GPIOB,(num<<4));
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	98 2f       	mov	r25, r24
    2412:	92 95       	swap	r25
    2414:	90 7f       	andi	r25, 0xF0	; 240
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	69 2f       	mov	r22, r25
    241a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <gpioPortWrite>
		softwareDelayMs(500);
    241e:	64 ef       	ldi	r22, 0xF4	; 244
    2420:	71 e0       	ldi	r23, 0x01	; 1
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
    242a:	ee cf       	rjmp	.-36     	; 0x2408 <main+0x4c>

0000242c <pushButtonInit>:
#include "pushButton.h"
void pushButtonInit(En_buttonId_t en_butotn_id)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <pushButtonInit+0x6>
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	89 83       	std	Y+1, r24	; 0x01
	switch(en_butotn_id)
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3b 83       	std	Y+3, r19	; 0x03
    2442:	2a 83       	std	Y+2, r18	; 0x02
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	91 05       	cpc	r25, r1
    244c:	31 f1       	breq	.+76     	; 0x249a <pushButtonInit+0x6e>
    244e:	2a 81       	ldd	r18, Y+2	; 0x02
    2450:	3b 81       	ldd	r19, Y+3	; 0x03
    2452:	23 30       	cpi	r18, 0x03	; 3
    2454:	31 05       	cpc	r19, r1
    2456:	54 f4       	brge	.+20     	; 0x246c <pushButtonInit+0x40>
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	89 f0       	breq	.+34     	; 0x2482 <pushButtonInit+0x56>
    2460:	2a 81       	ldd	r18, Y+2	; 0x02
    2462:	3b 81       	ldd	r19, Y+3	; 0x03
    2464:	21 30       	cpi	r18, 0x01	; 1
    2466:	31 05       	cpc	r19, r1
    2468:	91 f0       	breq	.+36     	; 0x248e <pushButtonInit+0x62>
    246a:	28 c0       	rjmp	.+80     	; 0x24bc <pushButtonInit+0x90>
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	91 05       	cpc	r25, r1
    2474:	c1 f0       	breq	.+48     	; 0x24a6 <pushButtonInit+0x7a>
    2476:	2a 81       	ldd	r18, Y+2	; 0x02
    2478:	3b 81       	ldd	r19, Y+3	; 0x03
    247a:	24 30       	cpi	r18, 0x04	; 4
    247c:	31 05       	cpc	r19, r1
    247e:	c9 f0       	breq	.+50     	; 0x24b2 <pushButtonInit+0x86>
    2480:	1d c0       	rjmp	.+58     	; 0x24bc <pushButtonInit+0x90>
	{
		case BTN_0:
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	60 e1       	ldi	r22, 0x10	; 16
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
    248c:	17 c0       	rjmp	.+46     	; 0x24bc <pushButtonInit+0x90>
			break;
		case BTN_1:
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	64 e0       	ldi	r22, 0x04	; 4
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
    2498:	11 c0       	rjmp	.+34     	; 0x24bc <pushButtonInit+0x90>
			break;
		case BTN_2:
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	64 e0       	ldi	r22, 0x04	; 4
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
    24a4:	0b c0       	rjmp	.+22     	; 0x24bc <pushButtonInit+0x90>
			break;
		case BTN_3:
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	68 e0       	ldi	r22, 0x08	; 8
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <pushButtonInit+0x90>
			break;
		case BTN_4_INT0:
			gpioPinDirection(GPIOD, BIT2, INPUT);
    24b2:	83 e0       	ldi	r24, 0x03	; 3
    24b4:	64 e0       	ldi	r22, 0x04	; 4
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
			break;
	}
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <pushButtonGetStatus+0x6>
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <pushButtonGetStatus+0x8>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char current_status=0;
    24d6:	19 82       	std	Y+1, r1	; 0x01
	switch(en_butotn_id)
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	3c 83       	std	Y+4, r19	; 0x04
    24e0:	2b 83       	std	Y+3, r18	; 0x03
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	91 05       	cpc	r25, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <pushButtonGetStatus+0x26>
    24ec:	50 c0       	rjmp	.+160    	; 0x258e <pushButtonGetStatus+0xc6>
    24ee:	2b 81       	ldd	r18, Y+3	; 0x03
    24f0:	3c 81       	ldd	r19, Y+4	; 0x04
    24f2:	23 30       	cpi	r18, 0x03	; 3
    24f4:	31 05       	cpc	r19, r1
    24f6:	54 f4       	brge	.+20     	; 0x250c <pushButtonGetStatus+0x44>
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	99 f0       	breq	.+38     	; 0x2526 <pushButtonGetStatus+0x5e>
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	21 30       	cpi	r18, 0x01	; 1
    2506:	31 05       	cpc	r19, r1
    2508:	41 f1       	breq	.+80     	; 0x255a <pushButtonGetStatus+0x92>
    250a:	89 c0       	rjmp	.+274    	; 0x261e <pushButtonGetStatus+0x156>
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	91 05       	cpc	r25, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <pushButtonGetStatus+0x50>
    2516:	54 c0       	rjmp	.+168    	; 0x25c0 <pushButtonGetStatus+0xf8>
    2518:	2b 81       	ldd	r18, Y+3	; 0x03
    251a:	3c 81       	ldd	r19, Y+4	; 0x04
    251c:	24 30       	cpi	r18, 0x04	; 4
    251e:	31 05       	cpc	r19, r1
    2520:	09 f4       	brne	.+2      	; 0x2524 <pushButtonGetStatus+0x5c>
    2522:	66 c0       	rjmp	.+204    	; 0x25f0 <pushButtonGetStatus+0x128>
    2524:	7c c0       	rjmp	.+248    	; 0x261e <pushButtonGetStatus+0x156>
	{
		case BTN_0:
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	60 e1       	ldi	r22, 0x10	; 16
    252a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <pushButtonGetStatus+0x6c>
    2532:	75 c0       	rjmp	.+234    	; 0x261e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    2534:	6e e1       	ldi	r22, 0x1E	; 30
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	60 e1       	ldi	r22, 0x10	; 16
    2544:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <pushButtonGetStatus+0x86>
    254c:	68 c0       	rjmp	.+208    	; 0x261e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	60 e1       	ldi	r22, 0x10	; 16
    2552:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	62 c0       	rjmp	.+196    	; 0x261e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_1:
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	64 e0       	ldi	r22, 0x04	; 4
    255e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    2562:	88 23       	and	r24, r24
    2564:	09 f4       	brne	.+2      	; 0x2568 <pushButtonGetStatus+0xa0>
    2566:	5b c0       	rjmp	.+182    	; 0x261e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    2568:	6e e1       	ldi	r22, 0x1E	; 30
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	64 e0       	ldi	r22, 0x04	; 4
    2578:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    257c:	88 23       	and	r24, r24
    257e:	09 f4       	brne	.+2      	; 0x2582 <pushButtonGetStatus+0xba>
    2580:	4e c0       	rjmp	.+156    	; 0x261e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	48 c0       	rjmp	.+144    	; 0x261e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_2:
			if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	64 e0       	ldi	r22, 0x04	; 4
    2592:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    2596:	88 23       	and	r24, r24
    2598:	09 f4       	brne	.+2      	; 0x259c <pushButtonGetStatus+0xd4>
    259a:	41 c0       	rjmp	.+130    	; 0x261e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    259c:	6e e1       	ldi	r22, 0x1E	; 30
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25b0:	88 23       	and	r24, r24
    25b2:	a9 f1       	breq	.+106    	; 0x261e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	64 e0       	ldi	r22, 0x04	; 4
    25b8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	2f c0       	rjmp	.+94     	; 0x261e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_3:
			if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	68 e0       	ldi	r22, 0x08	; 8
    25c4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25c8:	88 23       	and	r24, r24
    25ca:	49 f1       	breq	.+82     	; 0x261e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    25cc:	6e e1       	ldi	r22, 0x1E	; 30
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	68 e0       	ldi	r22, 0x08	; 8
    25dc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25e0:	88 23       	and	r24, r24
    25e2:	e9 f0       	breq	.+58     	; 0x261e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	68 e0       	ldi	r22, 0x08	; 8
    25e8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	17 c0       	rjmp	.+46     	; 0x261e <pushButtonGetStatus+0x156>
				}
			}
			break;

		case BTN_4_INT0:
			if(gpioPinRead(GPIOD, BIT2))
    25f0:	83 e0       	ldi	r24, 0x03	; 3
    25f2:	64 e0       	ldi	r22, 0x04	; 4
    25f4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    25f8:	88 23       	and	r24, r24
    25fa:	89 f0       	breq	.+34     	; 0x261e <pushButtonGetStatus+0x156>
			{
				softwareDelayMs(30);
    25fc:	6e e1       	ldi	r22, 0x1E	; 30
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 dd 13 	call	0x27ba	; 0x27ba <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(GPIOD, BIT2))
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    2610:	88 23       	and	r24, r24
    2612:	29 f0       	breq	.+10     	; 0x261e <pushButtonGetStatus+0x156>
				{
					current_status=gpioPinRead(GPIOD, BIT2);
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	64 e0       	ldi	r22, 0x04	; 4
    2618:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <gpioPinRead>
    261c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			break;

	}
	return current_status;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <sevenSegInit>:
#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <sevenSegInit+0x6>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	89 83       	std	Y+1, r24	; 0x01
	switch (a_segment_id)
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	3b 83       	std	Y+3, r19	; 0x03
    2644:	2a 83       	std	Y+2, r18	; 0x02
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	31 f0       	breq	.+12     	; 0x265a <sevenSegInit+0x2c>
    264e:	2a 81       	ldd	r18, Y+2	; 0x02
    2650:	3b 81       	ldd	r19, Y+3	; 0x03
    2652:	21 30       	cpi	r18, 0x01	; 1
    2654:	31 05       	cpc	r19, r1
    2656:	b1 f0       	breq	.+44     	; 0x2684 <sevenSegInit+0x56>
    2658:	29 c0       	rjmp	.+82     	; 0x26ac <sevenSegInit+0x7e>
	{
	case SEG_0:
		gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	6f e0       	ldi	r22, 0x0F	; 15
    265e:	4f ef       	ldi	r20, 0xFF	; 255
    2660:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	6f e0       	ldi	r22, 0x0F	; 15
    2668:	4f e0       	ldi	r20, 0x0F	; 15
    266a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT,OUTPUT);
    266e:	83 e0       	ldi	r24, 0x03	; 3
    2670:	64 e0       	ldi	r22, 0x04	; 4
    2672:	4f ef       	ldi	r20, 0xFF	; 255
    2674:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	64 e0       	ldi	r22, 0x04	; 4
    267c:	44 e0       	ldi	r20, 0x04	; 4
    267e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <sevenSegInit+0x7e>
		break;
	case SEG_1:
		gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS,OUTPUT);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	6f e0       	ldi	r22, 0x0F	; 15
    2688:	4f ef       	ldi	r20, 0xFF	; 255
    268a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, SEG_BCD_BITS);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	6f e0       	ldi	r22, 0x0F	; 15
    2692:	4f e0       	ldi	r20, 0x0F	; 15
    2694:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT,OUTPUT);
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	68 e0       	ldi	r22, 0x08	; 8
    269c:	4f ef       	ldi	r20, 0xFF	; 255
    269e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <gpioPinDirection>
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	68 e0       	ldi	r22, 0x08	; 8
    26a6:	48 e0       	ldi	r20, 0x08	; 8
    26a8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;
	}
}
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <sevenSegEnable>:


void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <sevenSegEnable+0x6>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3b 83       	std	Y+3, r19	; 0x03
    26ce:	2a 83       	std	Y+2, r18	; 0x02
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	31 f0       	breq	.+12     	; 0x26e4 <sevenSegEnable+0x2c>
    26d8:	2a 81       	ldd	r18, Y+2	; 0x02
    26da:	3b 81       	ldd	r19, Y+3	; 0x03
    26dc:	21 30       	cpi	r18, 0x01	; 1
    26de:	31 05       	cpc	r19, r1
    26e0:	39 f0       	breq	.+14     	; 0x26f0 <sevenSegEnable+0x38>
    26e2:	0b c0       	rjmp	.+22     	; 0x26fa <sevenSegEnable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_EN1_BIT);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	64 e0       	ldi	r22, 0x04	; 4
    26e8:	44 e0       	ldi	r20, 0x04	; 4
    26ea:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    26ee:	05 c0       	rjmp	.+10     	; 0x26fa <sevenSegEnable+0x42>
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_EN2_BIT);
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	68 e0       	ldi	r22, 0x08	; 8
    26f4:	48 e0       	ldi	r20, 0x08	; 8
    26f6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;
	}
}
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <sevenSegDisable+0x6>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
	switch (en_segment_id)
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	3b 83       	std	Y+3, r19	; 0x03
    271c:	2a 83       	std	Y+2, r18	; 0x02
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	31 f0       	breq	.+12     	; 0x2732 <sevenSegDisable+0x2c>
    2726:	2a 81       	ldd	r18, Y+2	; 0x02
    2728:	3b 81       	ldd	r19, Y+3	; 0x03
    272a:	21 30       	cpi	r18, 0x01	; 1
    272c:	31 05       	cpc	r19, r1
    272e:	39 f0       	breq	.+14     	; 0x273e <sevenSegDisable+0x38>
    2730:	0b c0       	rjmp	.+22     	; 0x2748 <sevenSegDisable+0x42>
	{
	case SEG_0:
		gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, LOW);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	64 e0       	ldi	r22, 0x04	; 4
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <sevenSegDisable+0x42>
		/*here I send LOW as a value because it will be ORed by the way
		 * with the port value in "gpioPinWrite" function
		 */
		break;
	case SEG_1:
		gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, LOW);
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	68 e0       	ldi	r22, 0x08	; 8
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;
	}
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <sevenSegWrite+0x6>
    275a:	00 d0       	rcall	.+0      	; 0x275c <sevenSegWrite+0x8>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	6a 83       	std	Y+2, r22	; 0x02
	switch (en_segment_id)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	3c 83       	std	Y+4, r19	; 0x04
    276c:	2b 83       	std	Y+3, r18	; 0x03
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	31 f0       	breq	.+12     	; 0x2782 <sevenSegWrite+0x2e>
    2776:	2b 81       	ldd	r18, Y+3	; 0x03
    2778:	3c 81       	ldd	r19, Y+4	; 0x04
    277a:	21 30       	cpi	r18, 0x01	; 1
    277c:	31 05       	cpc	r19, r1
    277e:	61 f0       	breq	.+24     	; 0x2798 <sevenSegWrite+0x44>
    2780:	15 c0       	rjmp	.+42     	; 0x27ac <sevenSegWrite+0x58>
	{
	case SEG_0:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	6f e0       	ldi	r22, 0x0F	; 15
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	6f e0       	ldi	r22, 0x0F	; 15
    2790:	4a 81       	ldd	r20, Y+2	; 0x02
    2792:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
    2796:	0a c0       	rjmp	.+20     	; 0x27ac <sevenSegWrite+0x58>
		break;
	case SEG_1:
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, LOW);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	6f e0       	ldi	r22, 0x0F	; 15
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, u8_number);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	6f e0       	ldi	r22, 0x0F	; 15
    27a6:	4a 81       	ldd	r20, Y+2	; 0x02
    27a8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <gpioPinWrite>
		break;
	}
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <softwareDelayMs>:
#include "softwareDelay.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2c 97       	sbiw	r28, 0x0c	; 12
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	69 87       	std	Y+9, r22	; 0x09
    27d0:	7a 87       	std	Y+10, r23	; 0x0a
    27d2:	8b 87       	std	Y+11, r24	; 0x0b
    27d4:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    27d6:	1d 82       	std	Y+5, r1	; 0x05
    27d8:	1e 82       	std	Y+6, r1	; 0x06
    27da:	1f 82       	std	Y+7, r1	; 0x07
    27dc:	18 86       	std	Y+8, r1	; 0x08
    27de:	27 c0       	rjmp	.+78     	; 0x282e <softwareDelayMs+0x74>
    {
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    27e0:	19 82       	std	Y+1, r1	; 0x01
    27e2:	1a 82       	std	Y+2, r1	; 0x02
    27e4:	1b 82       	std	Y+3, r1	; 0x03
    27e6:	1c 82       	std	Y+4, r1	; 0x04
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <softwareDelayMs+0x46>
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	ab 81       	ldd	r26, Y+3	; 0x03
    27f0:	bc 81       	ldd	r27, Y+4	; 0x04
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	a1 1d       	adc	r26, r1
    27f6:	b1 1d       	adc	r27, r1
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	ab 81       	ldd	r26, Y+3	; 0x03
    2806:	bc 81       	ldd	r27, Y+4	; 0x04
    2808:	81 3b       	cpi	r24, 0xB1	; 177
    280a:	21 e0       	ldi	r18, 0x01	; 1
    280c:	92 07       	cpc	r25, r18
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	a2 07       	cpc	r26, r18
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	b2 07       	cpc	r27, r18
    2816:	48 f3       	brcs	.-46     	; 0x27ea <softwareDelayMs+0x30>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	uint32_t i;
	uint32_t j;
    for(i=0;i<u32_delay_in_ms;i++)
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	af 81       	ldd	r26, Y+7	; 0x07
    281e:	b8 85       	ldd	r27, Y+8	; 0x08
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	a1 1d       	adc	r26, r1
    2824:	b1 1d       	adc	r27, r1
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	af 83       	std	Y+7, r26	; 0x07
    282c:	b8 87       	std	Y+8, r27	; 0x08
    282e:	2d 81       	ldd	r18, Y+5	; 0x05
    2830:	3e 81       	ldd	r19, Y+6	; 0x06
    2832:	4f 81       	ldd	r20, Y+7	; 0x07
    2834:	58 85       	ldd	r21, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	ab 85       	ldd	r26, Y+11	; 0x0b
    283c:	bc 85       	ldd	r27, Y+12	; 0x0c
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	4a 07       	cpc	r20, r26
    2844:	5b 07       	cpc	r21, r27
    2846:	60 f2       	brcs	.-104    	; 0x27e0 <softwareDelayMs+0x26>
    	for(j=0;j<NUMBER_OF_ITERATIONS;j++)
    	{

    	}
    }
}
    2848:	2c 96       	adiw	r28, 0x0c	; 12
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <timer0Init>:
* TCNT0,TIMSK,OCR0 and TCCR0
* ***********************************************************************/
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,
		En_timer0perscaler_t en_prescal, uint8_t u8_initialValue,
		uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    285a:	ef 92       	push	r14
    285c:	0f 93       	push	r16
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	28 97       	sbiw	r28, 0x08	; 8
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	6a 83       	std	Y+2, r22	; 0x02
    2876:	4b 83       	std	Y+3, r20	; 0x03
    2878:	2c 83       	std	Y+4, r18	; 0x04
    287a:	0d 83       	std	Y+5, r16	; 0x05
    287c:	ee 82       	std	Y+6, r14	; 0x06

	switch (en_mode)
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	38 87       	std	Y+8, r19	; 0x08
    2886:	2f 83       	std	Y+7, r18	; 0x07
    2888:	8f 81       	ldd	r24, Y+7	; 0x07
    288a:	98 85       	ldd	r25, Y+8	; 0x08
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	31 f0       	breq	.+12     	; 0x289c <timer0Init+0x42>
    2890:	2f 81       	ldd	r18, Y+7	; 0x07
    2892:	38 85       	ldd	r19, Y+8	; 0x08
    2894:	28 30       	cpi	r18, 0x08	; 8
    2896:	31 05       	cpc	r19, r1
    2898:	a9 f0       	breq	.+42     	; 0x28c4 <timer0Init+0x6a>
    289a:	27 c0       	rjmp	.+78     	; 0x28ea <timer0Init+0x90>
	{
	case T0_NORMAL_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    289c:	e2 e5       	ldi	r30, 0x52	; 82
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    28a4:	e9 e5       	ldi	r30, 0x59	; 89
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	8e 81       	ldd	r24, Y+6	; 0x06
    28aa:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare;
    28ac:	ec e5       	ldi	r30, 0x5C	; 92
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0 = en_prescal | en_OC0 | (1<<FOC0);   /*I made switch case because of FOC0 will be disabled to zero in the PWM mode*/
    28b4:	e3 e5       	ldi	r30, 0x53	; 83
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	89 2b       	or	r24, r25
    28be:	80 68       	ori	r24, 0x80	; 128
    28c0:	80 83       	st	Z, r24
    28c2:	13 c0       	rjmp	.+38     	; 0x28ea <timer0Init+0x90>
		break;

	case T0_COMP_MODE:
		TCNT0 = u8_initialValue; /*timer initial value*/
    28c4:	e2 e5       	ldi	r30, 0x52	; 82
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	80 83       	st	Z, r24
		OCR0 = u8_outputCompare; /*set the compare value*/
    28cc:	ec e5       	ldi	r30, 0x5C	; 92
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    28d4:	e9 e5       	ldi	r30, 0x59	; 89
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	8e 81       	ldd	r24, Y+6	; 0x06
    28da:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		TCCR0= en_prescal | en_OC0 | (1<<FOC0);
    28dc:	e3 e5       	ldi	r30, 0x53	; 83
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	89 2b       	or	r24, r25
    28e6:	80 68       	ori	r24, 0x80	; 128
    28e8:	80 83       	st	Z, r24
		break;
	}
}
    28ea:	28 96       	adiw	r28, 0x08	; 8
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	0f 91       	pop	r16
    28fc:	ef 90       	pop	r14
    28fe:	08 95       	ret

00002900 <timer0Set>:
* Parameters (in): u8_value - uint8_t value that defines the TCNT0 value
* Return value: None
* Description:this function sets a value in TCNT0 register
* ***********************************************************************/
void timer0Set(uint8_t u8_value)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8_value;
    290c:	e2 e5       	ldi	r30, 0x52	; 82
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	80 83       	st	Z, r24
}
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <timer0Read>:
* Parameters (in): None
* Return value: TCNT0_value - uint8_t variable that holds the value  of TCNT0
* Description:this function reads the value of TCNT0 register
* ***********************************************************************/
uint8_t timer0Read(void)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	0f 92       	push	r0
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
	uint8_t TCNT0_value=TCNT0;
    2926:	e2 e5       	ldi	r30, 0x52	; 82
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	89 83       	std	Y+1, r24	; 0x01
	return TCNT0_value;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <timer0Start>:
* Parameters (in): None
* Return value: None
* Description:this function sets the timer clock without prescaller
* ***********************************************************************/
void timer0Start(void)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_PRESCALER_NO;
    2940:	e3 e5       	ldi	r30, 0x53	; 83
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 83       	st	Z, r24
}
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <timer0Stop>:
* Parameters (in): None
* Return value: None
* Description:this function stops timer0 by stopping the timer clock
* ***********************************************************************/
void timer0Stop(void)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = T0_NO_CLOCK;
    2956:	e3 e5       	ldi	r30, 0x53	; 83
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	10 82       	st	Z, r1
}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <timer0DelayMs>:
* Parameters (in): u16_delay_in_ms - uint8_t defines the number of MS
* Return value: None
* Description:this function makes a delay in MS using timer0 with pooling
* ***********************************************************************/
void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    2962:	ef 92       	push	r14
    2964:	0f 93       	push	r16
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	00 d0       	rcall	.+0      	; 0x296c <timer0DelayMs+0xa>
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
    2974:	88 e0       	ldi	r24, 0x08	; 8
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	43 e0       	ldi	r20, 0x03	; 3
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	0a ef       	ldi	r16, 0xFA	; 250
    297e:	ee 24       	eor	r14, r14
    2980:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
    2984:	18 c0       	rjmp	.+48     	; 0x29b6 <timer0DelayMs+0x54>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
    2986:	e8 e5       	ldi	r30, 0x58	; 88
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	82 70       	andi	r24, 0x02	; 2
    2992:	90 70       	andi	r25, 0x00	; 0
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	b9 f3       	breq	.-18     	; 0x2986 <timer0DelayMs+0x24>
		SET_BIT(TIFR,OCF0);
    2998:	a8 e5       	ldi	r26, 0x58	; 88
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e8 e5       	ldi	r30, 0x58	; 88
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	82 60       	ori	r24, 0x02	; 2
    29a4:	8c 93       	st	X, r24
		TCNT0=0;
    29a6:	e2 e5       	ldi	r30, 0x52	; 82
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_POLLING);
	while(u16_delay_in_ms)
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	21 f7       	brne	.-56     	; 0x2986 <timer0DelayMs+0x24>
		while(BIT_IS_CLEAR(TIFR,OCF0));   /*while(TCNT<OCR0) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u16_delay_in_ms--;
	}
	timer0Stop();
    29be:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	0f 91       	pop	r16
    29cc:	ef 90       	pop	r14
    29ce:	08 95       	ret

000029d0 <timer0DelayMs_with_interrupt>:
* Parameters (in): u16_delay_in_ms - uint16_t defines the number of MS
* Return value: None
* Description:this function makes a delay in MS using timer0 with interrupt
* ***********************************************************************/
void timer0DelayMs_with_interrupt(uint16_t u16_delay_in_ms)
{
    29d0:	ef 92       	push	r14
    29d2:	0f 93       	push	r16
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <timer0DelayMs_with_interrupt+0xa>
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,MS_OCR_value,T0_INTERRUPT_CMP);
    29e2:	88 e0       	ldi	r24, 0x08	; 8
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	43 e0       	ldi	r20, 0x03	; 3
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	0a ef       	ldi	r16, 0xFA	; 250
    29ec:	ee 24       	eor	r14, r14
    29ee:	68 94       	set
    29f0:	e1 f8       	bld	r14, 1
    29f2:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	0f 91       	pop	r16
    2a00:	ef 90       	pop	r14
    2a02:	08 95       	ret

00002a04 <timer0DelayUs>:
* Parameters (in): u32_delay_in_us - uint8_t defines the number of US
* Return value: None
* Description:this function makes a delay in US using timer0 with pooling
* ***********************************************************************/
void timer0DelayUs(uint32_t u32_delay_in_us)
{
    2a04:	ef 92       	push	r14
    2a06:	0f 93       	push	r16
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <timer0DelayUs+0xa>
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <timer0DelayUs+0xc>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	69 83       	std	Y+1, r22	; 0x01
    2a16:	7a 83       	std	Y+2, r23	; 0x02
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
    2a1c:	88 e0       	ldi	r24, 0x08	; 8
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	00 e1       	ldi	r16, 0x10	; 16
    2a26:	ee 24       	eor	r14, r14
    2a28:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
    2a2c:	1d c0       	rjmp	.+58     	; 0x2a68 <timer0DelayUs+0x64>
	while(u32_delay_in_us)
	{
		while(TCNT0<OCR0);    /*another way to check*/
    2a2e:	e2 e5       	ldi	r30, 0x52	; 82
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	90 81       	ld	r25, Z
    2a34:	ec e5       	ldi	r30, 0x5C	; 92
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	98 17       	cp	r25, r24
    2a3c:	c0 f3       	brcs	.-16     	; 0x2a2e <timer0DelayUs+0x2a>
		SET_BIT(TIFR,OCF0);
    2a3e:	a8 e5       	ldi	r26, 0x58	; 88
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e8 e5       	ldi	r30, 0x58	; 88
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	82 60       	ori	r24, 0x02	; 2
    2a4a:	8c 93       	st	X, r24
		TCNT0=0;
    2a4c:	e2 e5       	ldi	r30, 0x52	; 82
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	10 82       	st	Z, r1
		u32_delay_in_us--;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	ab 81       	ldd	r26, Y+3	; 0x03
    2a58:	bc 81       	ldd	r27, Y+4	; 0x04
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	a1 09       	sbc	r26, r1
    2a5e:	b1 09       	sbc	r27, r1
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	ab 83       	std	Y+3, r26	; 0x03
    2a66:	bc 83       	std	Y+4, r27	; 0x04
* ***********************************************************************/
void timer0DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,US_OCR_value,T0_POLLING);
	while(u32_delay_in_us)
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	a1 05       	cpc	r26, r1
    2a74:	b1 05       	cpc	r27, r1
    2a76:	d9 f6       	brne	.-74     	; 0x2a2e <timer0DelayUs+0x2a>
		while(TCNT0<OCR0);    /*another way to check*/
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer0Stop();
    2a78:	0e 94 a7 14 	call	0x294e	; 0x294e <timer0Stop>
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	0f 91       	pop	r16
    2a8a:	ef 90       	pop	r14
    2a8c:	08 95       	ret

00002a8e <timer0HwPWM_Fast>:
* Return value: None
* Description:in this function the PWM generated using the timer0 FAST PWM mode
 * the caller has to choose one of the defined frequencies
* ***********************************************************************/
void timer0HwPWM_Fast(uint8_t u8_dutyCycle,En_timer0Fastfrequency_t u8_frequency)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <timer0HwPWM_Fast+0x6>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <timer0HwPWM_Fast+0x8>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = 0; /*timer initial value*/
    2a9e:	e2 e5       	ldi	r30, 0x52	; 82
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    2aa4:	e9 e5       	ldi	r30, 0x59	; 89
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	10 82       	st	Z, r1
	OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; /*output compare value*/
    2aaa:	ec e5       	ldi	r30, 0x5C	; 92
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	98 2f       	mov	r25, r24
    2ab6:	88 27       	eor	r24, r24
    2ab8:	24 e6       	ldi	r18, 0x64	; 100
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	b9 01       	movw	r22, r18
    2abe:	0e 94 76 19 	call	0x32ec	; 0x32ec <__divmodhi4>
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	80 83       	st	Z, r24

	switch(u8_frequency)
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3c 83       	std	Y+4, r19	; 0x04
    2ace:	2b 83       	std	Y+3, r18	; 0x03
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	29 f1       	breq	.+74     	; 0x2b24 <timer0HwPWM_Fast+0x96>
    2ada:	2b 81       	ldd	r18, Y+3	; 0x03
    2adc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ade:	24 30       	cpi	r18, 0x04	; 4
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	5c f4       	brge	.+22     	; 0x2afa <timer0HwPWM_Fast+0x6c>
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	91 05       	cpc	r25, r1
    2aec:	89 f0       	breq	.+34     	; 0x2b10 <timer0HwPWM_Fast+0x82>
    2aee:	2b 81       	ldd	r18, Y+3	; 0x03
    2af0:	3c 81       	ldd	r19, Y+4	; 0x04
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	89 f0       	breq	.+34     	; 0x2b1a <timer0HwPWM_Fast+0x8c>
    2af8:	23 c0       	rjmp	.+70     	; 0x2b40 <timer0HwPWM_Fast+0xb2>
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	84 30       	cpi	r24, 0x04	; 4
    2b00:	91 05       	cpc	r25, r1
    2b02:	a9 f0       	breq	.+42     	; 0x2b2e <timer0HwPWM_Fast+0xa0>
    2b04:	2b 81       	ldd	r18, Y+3	; 0x03
    2b06:	3c 81       	ldd	r19, Y+4	; 0x04
    2b08:	25 30       	cpi	r18, 0x05	; 5
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	a9 f0       	breq	.+42     	; 0x2b38 <timer0HwPWM_Fast+0xaa>
    2b0e:	18 c0       	rjmp	.+48     	; 0x2b40 <timer0HwPWM_Fast+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_NO | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2b10:	e3 e5       	ldi	r30, 0x53	; 83
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	89 e6       	ldi	r24, 0x69	; 105
    2b16:	80 83       	st	Z, r24
    2b18:	13 c0       	rjmp	.+38     	; 0x2b40 <timer0HwPWM_Fast+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_8 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2b1a:	e3 e5       	ldi	r30, 0x53	; 83
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	8a e6       	ldi	r24, 0x6A	; 106
    2b20:	80 83       	st	Z, r24
    2b22:	0e c0       	rjmp	.+28     	; 0x2b40 <timer0HwPWM_Fast+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
			 */
			TCCR0 =T0_PRESCALER_64 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2b24:	e3 e5       	ldi	r30, 0x53	; 83
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	8b e6       	ldi	r24, 0x6B	; 107
    2b2a:	80 83       	st	Z, r24
    2b2c:	09 c0       	rjmp	.+18     	; 0x2b40 <timer0HwPWM_Fast+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_256 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2b2e:	e3 e5       	ldi	r30, 0x53	; 83
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	8c e6       	ldi	r24, 0x6C	; 108
    2b34:	80 83       	st	Z, r24
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <timer0HwPWM_Fast+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. fast PWM mode WGM01=1 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_1024 | (1<<COM01)| (1<<WGM00) | (1<<WGM01);
    2b38:	e3 e5       	ldi	r30, 0x53	; 83
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	8d e6       	ldi	r24, 0x6D	; 109
    2b3e:	80 83       	st	Z, r24
			break;
	}
}
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <timer0HwPWM_PhaseCorrect>:
* Return value: None
* Description:in this function the PWM generated using the timer0 PHASE-CORRECT PWM mode
 * the caller has to choose one of the defined frequencies
* ***********************************************************************/
void timer0HwPWM_PhaseCorrect(uint8_t u8_dutyCycle,En_timer0PhaseCorrectfrequency_t u8_frequency)
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <timer0HwPWM_PhaseCorrect+0x6>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <timer0HwPWM_PhaseCorrect+0x8>
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	6a 83       	std	Y+2, r22	; 0x02
	TCNT0 = 0; /*timer initial value*/
    2b5e:	e2 e5       	ldi	r30, 0x52	; 82
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    2b64:	e9 e5       	ldi	r30, 0x59	; 89
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	10 82       	st	Z, r1
	OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; /*output compare value*/
    2b6a:	ec e5       	ldi	r30, 0x5C	; 92
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	98 2f       	mov	r25, r24
    2b76:	88 27       	eor	r24, r24
    2b78:	24 e6       	ldi	r18, 0x64	; 100
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	0e 94 76 19 	call	0x32ec	; 0x32ec <__divmodhi4>
    2b82:	cb 01       	movw	r24, r22
    2b84:	80 83       	st	Z, r24

	switch(u8_frequency)
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3c 83       	std	Y+4, r19	; 0x04
    2b8e:	2b 83       	std	Y+3, r18	; 0x03
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	29 f1       	breq	.+74     	; 0x2be4 <timer0HwPWM_PhaseCorrect+0x96>
    2b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9e:	24 30       	cpi	r18, 0x04	; 4
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	5c f4       	brge	.+22     	; 0x2bba <timer0HwPWM_PhaseCorrect+0x6c>
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	81 30       	cpi	r24, 0x01	; 1
    2baa:	91 05       	cpc	r25, r1
    2bac:	89 f0       	breq	.+34     	; 0x2bd0 <timer0HwPWM_PhaseCorrect+0x82>
    2bae:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	89 f0       	breq	.+34     	; 0x2bda <timer0HwPWM_PhaseCorrect+0x8c>
    2bb8:	23 c0       	rjmp	.+70     	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	84 30       	cpi	r24, 0x04	; 4
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	a9 f0       	breq	.+42     	; 0x2bee <timer0HwPWM_PhaseCorrect+0xa0>
    2bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc8:	25 30       	cpi	r18, 0x05	; 5
    2bca:	31 05       	cpc	r19, r1
    2bcc:	a9 f0       	breq	.+42     	; 0x2bf8 <timer0HwPWM_PhaseCorrect+0xaa>
    2bce:	18 c0       	rjmp	.+48     	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_NO | (1<<COM01)| (1<<WGM00);
    2bd0:	e3 e5       	ldi	r30, 0x53	; 83
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	81 e6       	ldi	r24, 0x61	; 97
    2bd6:	80 83       	st	Z, r24
    2bd8:	13 c0       	rjmp	.+38     	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
			 */
			TCCR0 =T0_PRESCALER_8 | (1<<COM01)| (1<<WGM00);
    2bda:	e3 e5       	ldi	r30, 0x53	; 83
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	82 e6       	ldi	r24, 0x62	; 98
    2be0:	80 83       	st	Z, r24
    2be2:	0e c0       	rjmp	.+28     	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
			 */
			TCCR0 =T0_PRESCALER_64 | (1<<COM01)| (1<<WGM00);
    2be4:	e3 e5       	ldi	r30, 0x53	; 83
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	83 e6       	ldi	r24, 0x63	; 99
    2bea:	80 83       	st	Z, r24
    2bec:	09 c0       	rjmp	.+18     	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_256 | (1<<COM01)| (1<<WGM00);
    2bee:	e3 e5       	ldi	r30, 0x53	; 83
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	84 e6       	ldi	r24, 0x64	; 100
    2bf4:	80 83       	st	Z, r24
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <timer0HwPWM_PhaseCorrect+0xb2>
			 * 1. PWM mode FOC0=0
			 * 2. phase correct PWM mode WGM01=0 & WGM00=1
			 * 3. clear OC0 on compare match COM00=0 & COM01=1
			 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
			 */
			TCCR0 =T0_PRESCALER_1024 | (1<<COM01)| (1<<WGM00);
    2bf8:	e3 e5       	ldi	r30, 0x53	; 83
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	85 e6       	ldi	r24, 0x65	; 101
    2bfe:	80 83       	st	Z, r24
			break;
	}
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <timer0SwPWM>:
* Return value: None
* Description:in this function the PWM generated using the timer0 OUTPUT-COMPARE mode
 * the caller has to choose one of the defined frequencies
* ***********************************************************************/
void timer0SwPWM(uint8_t u8_dutyCycle,En_timer0Swfrequency_t u8_frequency)
{
    2c0e:	ef 92       	push	r14
    2c10:	0f 93       	push	r16
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <timer0SwPWM+0xa>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <timer0SwPWM+0xc>
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <timer0SwPWM+0xe>
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t TCNT0_TEMP;
	uint8_t OCR0_TEMP;
	if(u8_dutyCycle==100)  /*this if statement because at 100% duty cycle the */
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	84 36       	cpi	r24, 0x64	; 100
    2c28:	11 f4       	brne	.+4      	; 0x2c2e <timer0SwPWM+0x20>
	{                      /*TCNT0 will equal OCR0 and the OVF interrupt will be*/
		u8_dutyCycle=99;   /*executed first then the COMP ISR, so this will generate*/
    2c2a:	83 e6       	ldi	r24, 0x63	; 99
    2c2c:	8b 83       	std	Y+3, r24	; 0x03
	}                      /*a 0% duty cycle instead of 100%*/
	switch(u8_frequency)
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	3e 83       	std	Y+6, r19	; 0x06
    2c36:	2d 83       	std	Y+5, r18	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	83 30       	cpi	r24, 0x03	; 3
    2c3e:	91 05       	cpc	r25, r1
    2c40:	31 f0       	breq	.+12     	; 0x2c4e <timer0SwPWM+0x40>
    2c42:	2d 81       	ldd	r18, Y+5	; 0x05
    2c44:	3e 81       	ldd	r19, Y+6	; 0x06
    2c46:	25 30       	cpi	r18, 0x05	; 5
    2c48:	31 05       	cpc	r19, r1
    2c4a:	b9 f1       	breq	.+110    	; 0x2cba <timer0SwPWM+0xac>
    2c4c:	60 c0       	rjmp	.+192    	; 0x2d0e <timer0SwPWM+0x100>
	{
	case T0_SW_FREQUENCY_1KHZ:
			TCNT0_TEMP=6;
    2c4e:	86 e0       	ldi	r24, 0x06	; 6
    2c50:	8a 83       	std	Y+2, r24	; 0x02
			OCR0_TEMP=(u8_dutyCycle)*(250/100.0)+6;
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	aa 27       	eor	r26, r26
    2c5a:	97 fd       	sbrc	r25, 7
    2c5c:	a0 95       	com	r26
    2c5e:	ba 2f       	mov	r27, r26
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e2       	ldi	r20, 0x20	; 32
    2c76:	50 e4       	ldi	r21, 0x40	; 64
    2c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 ec       	ldi	r20, 0xC0	; 192
    2c8a:	50 e4       	ldi	r21, 0x40	; 64
    2c8c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	89 83       	std	Y+1, r24	; 0x01
			timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,TCNT0_TEMP,OCR0_TEMP,T0_INTERRUPT_NORMAL|T0_INTERRUPT_CMP);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	43 e0       	ldi	r20, 0x03	; 3
    2ca8:	2a 81       	ldd	r18, Y+2	; 0x02
    2caa:	09 81       	ldd	r16, Y+1	; 0x01
    2cac:	0f 2e       	mov	r0, r31
    2cae:	f3 e0       	ldi	r31, 0x03	; 3
    2cb0:	ef 2e       	mov	r14, r31
    2cb2:	f0 2d       	mov	r31, r0
    2cb4:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
    2cb8:	2a c0       	rjmp	.+84     	; 0x2d0e <timer0SwPWM+0x100>
			break;

	case T0_SW_FREQUENCY_61HZ:
			TCNT0_TEMP=0;
    2cba:	1a 82       	std	Y+2, r1	; 0x02
			OCR0_TEMP=(u8_dutyCycle)*(256/100.0);
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	aa 27       	eor	r26, r26
    2cc4:	97 fd       	sbrc	r25, 7
    2cc6:	a0 95       	com	r26
    2cc8:	ba 2f       	mov	r27, r26
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	2a e0       	ldi	r18, 0x0A	; 10
    2cdc:	37 ed       	ldi	r19, 0xD7	; 215
    2cde:	43 e2       	ldi	r20, 0x23	; 35
    2ce0:	50 e4       	ldi	r21, 0x40	; 64
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	89 83       	std	Y+1, r24	; 0x01
			timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,TCNT0_TEMP,OCR0_TEMP,T0_INTERRUPT_NORMAL|T0_INTERRUPT_CMP);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	45 e0       	ldi	r20, 0x05	; 5
    2cfe:	2a 81       	ldd	r18, Y+2	; 0x02
    2d00:	09 81       	ldd	r16, Y+1	; 0x01
    2d02:	0f 2e       	mov	r0, r31
    2d04:	f3 e0       	ldi	r31, 0x03	; 3
    2d06:	ef 2e       	mov	r14, r31
    2d08:	f0 2d       	mov	r31, r0
    2d0a:	0e 94 2d 14 	call	0x285a	; 0x285a <timer0Init>
			break;
	}
	g8_TCNT0_value_Swpwm_ISR=TCNT0_TEMP;
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	80 93 6f 01 	sts	0x016F, r24
}
    2d14:	26 96       	adiw	r28, 0x06	; 6
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	0f 91       	pop	r16
    2d26:	ef 90       	pop	r14
    2d28:	08 95       	ret

00002d2a <timer1Init>:
* ***********************************************************************/
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
		En_timer1perscaler_t en_prescal, uint16_t u16_initialValue,
		uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,
		uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    2d2a:	af 92       	push	r10
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	2f 97       	sbiw	r28, 0x0f	; 15
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	7b 83       	std	Y+3, r23	; 0x03
    2d50:	6a 83       	std	Y+2, r22	; 0x02
    2d52:	4c 83       	std	Y+4, r20	; 0x04
    2d54:	3e 83       	std	Y+6, r19	; 0x06
    2d56:	2d 83       	std	Y+5, r18	; 0x05
    2d58:	18 87       	std	Y+8, r17	; 0x08
    2d5a:	0f 83       	std	Y+7, r16	; 0x07
    2d5c:	fa 86       	std	Y+10, r15	; 0x0a
    2d5e:	e9 86       	std	Y+9, r14	; 0x09
    2d60:	dc 86       	std	Y+12, r13	; 0x0c
    2d62:	cb 86       	std	Y+11, r12	; 0x0b
    2d64:	ad 86       	std	Y+13, r10	; 0x0d

	switch (en_mode)
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	3f 87       	std	Y+15, r19	; 0x0f
    2d6e:	2e 87       	std	Y+14, r18	; 0x0e
    2d70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d74:	88 30       	cpi	r24, 0x08	; 8
    2d76:	91 05       	cpc	r25, r1
    2d78:	21 f1       	breq	.+72     	; 0x2dc2 <timer1Init+0x98>
    2d7a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d7c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d7e:	28 31       	cpi	r18, 0x18	; 24
    2d80:	31 05       	cpc	r19, r1
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <timer1Init+0x5c>
    2d84:	43 c0       	rjmp	.+134    	; 0x2e0c <timer1Init+0xe2>
    2d86:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <timer1Init+0x66>
    2d8e:	62 c0       	rjmp	.+196    	; 0x2e54 <timer1Init+0x12a>
	{
	case T1_NORMAL_MODE:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2d90:	ed e4       	ldi	r30, 0x4D	; 77
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	8d 81       	ldd	r24, Y+5	; 0x05
    2d96:	9e 81       	ldd	r25, Y+6	; 0x06
    2d98:	89 2f       	mov	r24, r25
    2d9a:	99 27       	eor	r25, r25
    2d9c:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2d9e:	ec e4       	ldi	r30, 0x4C	; 76
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2da6:	e9 e5       	ldi	r30, 0x59	; 89
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 0 (normal mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2dae:	ef e4       	ldi	r30, 0x4F	; 79
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	83 60       	ori	r24, 0x03	; 3
    2db6:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. choose the Prescaler using (CS12 CS11 CS10)
		 * 2. mode number 0 (normal mode)   WGM13=0  WGM12=0
	     */
		TCCR1B = en_prescal;
    2db8:	ee e4       	ldi	r30, 0x4E	; 78
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbe:	80 83       	st	Z, r24
    2dc0:	49 c0       	rjmp	.+146    	; 0x2e54 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_OCR1A_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2dc2:	ed e4       	ldi	r30, 0x4D	; 77
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	89 2f       	mov	r24, r25
    2dcc:	99 27       	eor	r25, r25
    2dce:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2dd0:	ec e4       	ldi	r30, 0x4C	; 76
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2dd8:	e9 e5       	ldi	r30, 0x59	; 89
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	80 83       	st	Z, r24
		OCR1AH = ((u16_outputCompareA & 0xFF00)>>8); /*set the compare value*/
    2de0:	eb e4       	ldi	r30, 0x4B	; 75
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	8f 81       	ldd	r24, Y+7	; 0x07
    2de6:	98 85       	ldd	r25, Y+8	; 0x08
    2de8:	89 2f       	mov	r24, r25
    2dea:	99 27       	eor	r25, r25
    2dec:	80 83       	st	Z, r24
		OCR1AL = (u16_outputCompareA & 0x00FF);
    2dee:	ea e4       	ldi	r30, 0x4A	; 74
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	8f 81       	ldd	r24, Y+7	; 0x07
    2df4:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2df6:	ef e4       	ldi	r30, 0x4F	; 79
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	83 60       	ori	r24, 0x03	; 3
    2dfe:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 4 (CTC mode_OCR1A)   WGM13=0  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12);
    2e00:	ee e4       	ldi	r30, 0x4E	; 78
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	8c 81       	ldd	r24, Y+4	; 0x04
    2e06:	88 60       	ori	r24, 0x08	; 8
    2e08:	80 83       	st	Z, r24
    2e0a:	24 c0       	rjmp	.+72     	; 0x2e54 <timer1Init+0x12a>
		break;

	case T1_COMP_MODE_ICR1_TOP:
		TCNT1H = ((u16_initialValue & 0xFF00)>>8); /*timer initial value*/
    2e0c:	ed e4       	ldi	r30, 0x4D	; 77
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	89 2f       	mov	r24, r25
    2e16:	99 27       	eor	r25, r25
    2e18:	80 83       	st	Z, r24
		TCNT1L = (u16_initialValue & 0x00FF);
    2e1a:	ec e4       	ldi	r30, 0x4C	; 76
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	80 83       	st	Z, r24
		TIMSK = en_interruptMask; /*disable or choose the interrupt*/
    2e22:	e9 e5       	ldi	r30, 0x59	; 89
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	80 83       	st	Z, r24
		ICR1H = ((u16_inputCapture & 0xFF00)>>8); /*set the input capture value*/
    2e2a:	e7 e4       	ldi	r30, 0x47	; 71
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e32:	89 2f       	mov	r24, r25
    2e34:	99 27       	eor	r25, r25
    2e36:	80 83       	st	Z, r24
		ICR1L = (u16_inputCapture & 0x00FF);
    2e38:	e6 e4       	ldi	r30, 0x46	; 70
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e3e:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
	     * 1. mode number 4 (CTC mode) WGM11=0 WGM10=0
	     * 2. COM1A1 COM1A0 COM1B1 COM1B0 describe OC1A & OC1B operations according to en_OC
	     * 3. FOC1A=1 FOC1B=1 because these bits are only active in case non-pwm mode)
		 */
		TCCR1A = FOC1A | FOC1B | en_OC;
    2e40:	ef e4       	ldi	r30, 0x4F	; 79
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	83 60       	ori	r24, 0x03	; 3
    2e48:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. mode number 12 (CTC mode _ICR1)   WGM13=1  WGM12=1
		 * 2. choose the prescaler using (CS12 CS11 CS10)
	     */
		TCCR1B = en_prescal | (1<<WGM12) | (1<<WGM13);
    2e4a:	ee e4       	ldi	r30, 0x4E	; 78
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e50:	88 61       	ori	r24, 0x18	; 24
    2e52:	80 83       	st	Z, r24
		break;
	}
}
    2e54:	2f 96       	adiw	r28, 0x0f	; 15
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	ff 90       	pop	r15
    2e6a:	ef 90       	pop	r14
    2e6c:	df 90       	pop	r13
    2e6e:	cf 90       	pop	r12
    2e70:	af 90       	pop	r10
    2e72:	08 95       	ret

00002e74 <timer1Set>:
* Parameters (in): u16_value - uint16_t value that defines the TCNT1 value
* Return value: None
* Description:this function sets a value in TCNT1 register
* ***********************************************************************/
void timer1Set(uint16_t u16_value)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <timer1Set+0x6>
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H = ((u16_value & 0xFF00)>>8); /*timer initial value*/
    2e82:	ed e4       	ldi	r30, 0x4D	; 77
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	89 2f       	mov	r24, r25
    2e8c:	99 27       	eor	r25, r25
    2e8e:	80 83       	st	Z, r24
	TCNT1L = (u16_value & 0x00FF);
    2e90:	ec e4       	ldi	r30, 0x4C	; 76
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	80 83       	st	Z, r24
}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <timer1Read>:
* Parameters (in): None
* Return value: TCNT16_value - uint16_t variable that holds the value  of TCNT1
* Description:this function reads the value of TCNT1 register
* ***********************************************************************/
uint16_t timer1Read(void)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <timer1Read+0x6>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
	uint16_t TCNT1_value=TCNT1;
    2eac:	ec e4       	ldi	r30, 0x4C	; 76
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	91 81       	ldd	r25, Z+1	; 0x01
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
	return TCNT1_value;
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <timer1Start>:
* Parameters (in): None
* Return value: None
* Description:this function sets the timer clock without prescaller
* ***********************************************************************/
void timer1Start(void)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_PRESCALER_NO;
    2ece:	ee e4       	ldi	r30, 0x4E	; 78
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	80 83       	st	Z, r24
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <timer1Stop>:
* Parameters (in): None
* Return value: None
* Description:this function stops timer1 by stopping the timer clock
* ***********************************************************************/
void timer1Stop(void)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = T0_NO_CLOCK;
    2ee4:	ee e4       	ldi	r30, 0x4E	; 78
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	10 82       	st	Z, r1
}
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <timer1DelayMs>:
* Parameters (in): u16_delay_in_ms - uint16_t defines the number of MS
* Return value: None
* Description:this function makes a delay in MS using timer1 with pooling
* ***********************************************************************/
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    2ef0:	af 92       	push	r10
    2ef2:	cf 92       	push	r12
    2ef4:	df 92       	push	r13
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <timer1DelayMs+0x14>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	43 e0       	ldi	r20, 0x03	; 3
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	0a ef       	ldi	r16, 0xFA	; 250
    2f1a:	10 e0       	ldi	r17, 0x00	; 0
    2f1c:	ee 24       	eor	r14, r14
    2f1e:	ff 24       	eor	r15, r15
    2f20:	cc 24       	eor	r12, r12
    2f22:	dd 24       	eor	r13, r13
    2f24:	aa 24       	eor	r10, r10
    2f26:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <timer1Init>
    2f2a:	19 c0       	rjmp	.+50     	; 0x2f5e <timer1DelayMs+0x6e>
	while(u16_delay_in_ms)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
    2f2c:	e8 e5       	ldi	r30, 0x58	; 88
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	88 2f       	mov	r24, r24
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	80 71       	andi	r24, 0x10	; 16
    2f38:	90 70       	andi	r25, 0x00	; 0
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	b9 f3       	breq	.-18     	; 0x2f2c <timer1DelayMs+0x3c>
		SET_BIT(TIFR,OCF1A);
    2f3e:	a8 e5       	ldi	r26, 0x58	; 88
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e8 e5       	ldi	r30, 0x58	; 88
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	80 61       	ori	r24, 0x10	; 16
    2f4a:	8c 93       	st	X, r24
		TCNT1=0;
    2f4c:	ec e4       	ldi	r30, 0x4C	; 76
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	11 82       	std	Z+1, r1	; 0x01
    2f52:	10 82       	st	Z, r1
		u16_delay_in_ms--;
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	/*CTC WITH POOLING*/
	/*this is the equation of ms_OCR_value
	((SEC/(1/(cpu_frq/T0_PRESCALER_64)))/TIMER0_OVER_FLOW_VALUE);
	*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_64,0,MS_OCR_value,0,0,T0_POLLING);
	while(u16_delay_in_ms)
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	19 f7       	brne	.-58     	; 0x2f2c <timer1DelayMs+0x3c>
		while(BIT_IS_CLEAR(TIFR,OCF1A));   /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF1A);
		TCNT1=0;
		u16_delay_in_ms--;
	}
	timer1Stop();
    2f66:	0e 94 6e 17 	call	0x2edc	; 0x2edc <timer1Stop>
}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	cf 90       	pop	r12
    2f7e:	af 90       	pop	r10
    2f80:	08 95       	ret

00002f82 <timer1DelayUs>:
* Parameters (in): u32_delay_in_us - uint32_t defines the number of US
* Return value: None
* Description:this function makes a delay in US using timer1 with pooling
* ***********************************************************************/
void timer1DelayUs(uint32_t u32_delay_in_us)
{
    2f82:	af 92       	push	r10
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <timer1DelayUs+0x14>
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <timer1DelayUs+0x16>
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	69 83       	std	Y+1, r22	; 0x01
    2f9e:	7a 83       	std	Y+2, r23	; 0x02
    2fa0:	8b 83       	std	Y+3, r24	; 0x03
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
    2fa4:	88 e0       	ldi	r24, 0x08	; 8
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	41 e0       	ldi	r20, 0x01	; 1
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	00 e1       	ldi	r16, 0x10	; 16
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	ee 24       	eor	r14, r14
    2fb6:	ff 24       	eor	r15, r15
    2fb8:	cc 24       	eor	r12, r12
    2fba:	dd 24       	eor	r13, r13
    2fbc:	aa 24       	eor	r10, r10
    2fbe:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <timer1Init>
    2fc2:	1e c0       	rjmp	.+60     	; 0x3000 <timer1DelayUs+0x7e>
	while(u32_delay_in_us)
	{
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
    2fc4:	e8 e5       	ldi	r30, 0x58	; 88
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	80 71       	andi	r24, 0x10	; 16
    2fd0:	90 70       	andi	r25, 0x00	; 0
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	b9 f3       	breq	.-18     	; 0x2fc4 <timer1DelayUs+0x42>
		SET_BIT(TIFR,OCF0);
    2fd6:	a8 e5       	ldi	r26, 0x58	; 88
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e8 e5       	ldi	r30, 0x58	; 88
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	82 60       	ori	r24, 0x02	; 2
    2fe2:	8c 93       	st	X, r24
		TCNT0=0;
    2fe4:	e2 e5       	ldi	r30, 0x52	; 82
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	10 82       	st	Z, r1
		u32_delay_in_us--;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	ab 81       	ldd	r26, Y+3	; 0x03
    2ff0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	a1 09       	sbc	r26, r1
    2ff6:	b1 09       	sbc	r27, r1
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	ab 83       	std	Y+3, r26	; 0x03
    2ffe:	bc 83       	std	Y+4, r27	; 0x04
* ***********************************************************************/
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	/*CTC WITH POOLING*/
	timer1Init(T1_COMP_MODE_OCR1A_TOP,T1_OC1_DIS,T1_PRESCALER_NO,0,US_OCR_value,0,0,T0_POLLING);
	while(u32_delay_in_us)
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	9a 81       	ldd	r25, Y+2	; 0x02
    3004:	ab 81       	ldd	r26, Y+3	; 0x03
    3006:	bc 81       	ldd	r27, Y+4	; 0x04
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	a1 05       	cpc	r26, r1
    300c:	b1 05       	cpc	r27, r1
    300e:	d1 f6       	brne	.-76     	; 0x2fc4 <timer1DelayUs+0x42>
		while(BIT_IS_CLEAR(TIFR,OCF1A));  /*while(TCNT<OCR1A) this condition will handle 1.01s */
		SET_BIT(TIFR,OCF0);
		TCNT0=0;
		u32_delay_in_us--;
	}
	timer1Stop();
    3010:	0e 94 6e 17 	call	0x2edc	; 0x2edc <timer1Stop>
	return;
}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	ff 90       	pop	r15
    3026:	ef 90       	pop	r14
    3028:	df 90       	pop	r13
    302a:	cf 90       	pop	r12
    302c:	af 90       	pop	r10
    302e:	08 95       	ret

00003030 <timer1HwPWM_Fast>:
* Description:in this function the PWM generated using the timer1 FAST PWM
* mode 14 (fast PWM ICR1 TOP)
* the caller has to choose one of the defined frequencies
* ***********************************************************************/
void timer1HwPWM_Fast(uint8_t u8_dutyCycle,En_timer1Fastfrequency_t u8_frequency)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <timer1HwPWM_Fast+0x6>
    3036:	00 d0       	rcall	.+0      	; 0x3038 <timer1HwPWM_Fast+0x8>
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0; /*timer initial value*/
    3040:	ec e4       	ldi	r30, 0x4C	; 76
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	11 82       	std	Z+1, r1	; 0x01
    3046:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    3048:	e9 e5       	ldi	r30, 0x59	; 89
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	10 82       	st	Z, r1
	OCR1A = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    304e:	ea e4       	ldi	r30, 0x4A	; 74
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	c9 01       	movw	r24, r18
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	82 0f       	add	r24, r18
    3060:	93 1f       	adc	r25, r19
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
	OCR1B = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    3072:	e8 e4       	ldi	r30, 0x48	; 72
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	c9 01       	movw	r24, r18
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	82 0f       	add	r24, r18
    3084:	93 1f       	adc	r25, r19
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24

	switch(u8_frequency)
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	3c 83       	std	Y+4, r19	; 0x04
    309e:	2b 83       	std	Y+3, r18	; 0x03
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	83 30       	cpi	r24, 0x03	; 3
    30a6:	91 05       	cpc	r25, r1
    30a8:	c9 f1       	breq	.+114    	; 0x311c <timer1HwPWM_Fast+0xec>
    30aa:	2b 81       	ldd	r18, Y+3	; 0x03
    30ac:	3c 81       	ldd	r19, Y+4	; 0x04
    30ae:	24 30       	cpi	r18, 0x04	; 4
    30b0:	31 05       	cpc	r19, r1
    30b2:	5c f4       	brge	.+22     	; 0x30ca <timer1HwPWM_Fast+0x9a>
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	91 05       	cpc	r25, r1
    30bc:	89 f0       	breq	.+34     	; 0x30e0 <timer1HwPWM_Fast+0xb0>
    30be:	2b 81       	ldd	r18, Y+3	; 0x03
    30c0:	3c 81       	ldd	r19, Y+4	; 0x04
    30c2:	22 30       	cpi	r18, 0x02	; 2
    30c4:	31 05       	cpc	r19, r1
    30c6:	d9 f0       	breq	.+54     	; 0x30fe <timer1HwPWM_Fast+0xce>
    30c8:	55 c0       	rjmp	.+170    	; 0x3174 <timer1HwPWM_Fast+0x144>
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	84 30       	cpi	r24, 0x04	; 4
    30d0:	91 05       	cpc	r25, r1
    30d2:	99 f1       	breq	.+102    	; 0x313a <timer1HwPWM_Fast+0x10a>
    30d4:	2b 81       	ldd	r18, Y+3	; 0x03
    30d6:	3c 81       	ldd	r19, Y+4	; 0x04
    30d8:	25 30       	cpi	r18, 0x05	; 5
    30da:	31 05       	cpc	r19, r1
    30dc:	e9 f1       	breq	.+122    	; 0x3158 <timer1HwPWM_Fast+0x128>
    30de:	4a c0       	rjmp	.+148    	; 0x3174 <timer1HwPWM_Fast+0x144>
	{

	case(T1_FAST_FREQUENCY_6KHZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    30e0:	e6 e4       	ldi	r30, 0x46	; 70
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	83 ec       	ldi	r24, 0xC3	; 195
    30e6:	99 e0       	ldi	r25, 0x09	; 9
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    30ec:	ef e4       	ldi	r30, 0x4F	; 79
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	82 ea       	ldi	r24, 0xA2	; 162
    30f2:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_NO;
    30f4:	ee e4       	ldi	r30, 0x4E	; 78
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	89 e1       	ldi	r24, 0x19	; 25
    30fa:	80 83       	st	Z, r24
    30fc:	3b c0       	rjmp	.+118    	; 0x3174 <timer1HwPWM_Fast+0x144>
			break;

	case(T1_FAST_FREQUENCY_800HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    30fe:	e6 e4       	ldi	r30, 0x46	; 70
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	83 ec       	ldi	r24, 0xC3	; 195
    3104:	99 e0       	ldi	r25, 0x09	; 9
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    310a:	ef e4       	ldi	r30, 0x4F	; 79
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	82 ea       	ldi	r24, 0xA2	; 162
    3110:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/8
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_8;
    3112:	ee e4       	ldi	r30, 0x4E	; 78
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	8a e1       	ldi	r24, 0x1A	; 26
    3118:	80 83       	st	Z, r24
    311a:	2c c0       	rjmp	.+88     	; 0x3174 <timer1HwPWM_Fast+0x144>
			break;

	case(T1_FAST_FREQUENCY_100HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    311c:	e6 e4       	ldi	r30, 0x46	; 70
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	83 ec       	ldi	r24, 0xC3	; 195
    3122:	99 e0       	ldi	r25, 0x09	; 9
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1) | (1<<COM1B1);
    3128:	ef e4       	ldi	r30, 0x4F	; 79
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	82 ea       	ldi	r24, 0xA2	; 162
    312e:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/64
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_64;
    3130:	ee e4       	ldi	r30, 0x4E	; 78
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	8b e1       	ldi	r24, 0x1B	; 27
    3136:	80 83       	st	Z, r24
    3138:	1d c0       	rjmp	.+58     	; 0x3174 <timer1HwPWM_Fast+0x144>
			break;

	case(T1_FAST_FREQUENCY_25HZ):  //90hz
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    313a:	e6 e4       	ldi	r30, 0x46	; 70
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	83 ec       	ldi	r24, 0xC3	; 195
    3140:	99 e0       	ldi	r25, 0x09	; 9
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
		     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    3146:	ef e4       	ldi	r30, 0x4F	; 79
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	82 ea       	ldi	r24, 0xA2	; 162
    314c:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/256
		     */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_256;
    314e:	ee e4       	ldi	r30, 0x4E	; 78
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	8c e1       	ldi	r24, 0x1C	; 28
    3154:	80 83       	st	Z, r24
    3156:	0e c0       	rjmp	.+28     	; 0x3174 <timer1HwPWM_Fast+0x144>
			break;

	case(T1_FAST_FREQUENCY_6HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    3158:	e6 e4       	ldi	r30, 0x46	; 70
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	83 ec       	ldi	r24, 0xC3	; 195
    315e:	99 e0       	ldi	r25, 0x09	; 9
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    3164:	ef e4       	ldi	r30, 0x4F	; 79
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	82 ea       	ldi	r24, 0xA2	; 162
    316a:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/1024
			 */
			TCCR1B = (1<<WGM12) | (1<<WGM13) | T1_PRESCALER_1024;
    316c:	ee e4       	ldi	r30, 0x4E	; 78
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	8d e1       	ldi	r24, 0x1D	; 29
    3172:	80 83       	st	Z, r24
			break;
	}
}
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <timer1HwPWM_PhaseCorrect>:
* Description:in this function the PWM generated using the timer1 PHASE-CORRECT PWM
* mode 10 (phase correct PWM ICR1 TOP)
 * the caller has to choose one of the defined frequencies
* ***********************************************************************/
void timer1HwPWM_PhaseCorrect(uint8_t u8_dutyCycle,En_timer1PhaseCorrectfrequency_t u8_frequency)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <timer1HwPWM_PhaseCorrect+0x6>
    3188:	00 d0       	rcall	.+0      	; 0x318a <timer1HwPWM_PhaseCorrect+0x8>
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0; /*timer initial value*/
    3192:	ec e4       	ldi	r30, 0x4C	; 76
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	11 82       	std	Z+1, r1	; 0x01
    3198:	10 82       	st	Z, r1
	TIMSK = 0; /*disable interrupts*/
    319a:	e9 e5       	ldi	r30, 0x59	; 89
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	10 82       	st	Z, r1
	OCR1A = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    31a0:	ea e4       	ldi	r30, 0x4A	; 74
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	c9 01       	movw	r24, r18
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	82 0f       	add	r24, r18
    31b2:	93 1f       	adc	r25, r19
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	80 83       	st	Z, r24
	OCR1B = (u8_dutyCycle)*(TIMER_ICR1_TOP_VALUE/100);   /*output compare value*/
    31c4:	e8 e4       	ldi	r30, 0x48	; 72
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	c9 01       	movw	r24, r18
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	82 0f       	add	r24, r18
    31d6:	93 1f       	adc	r25, r19
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	91 83       	std	Z+1, r25	; 0x01
    31e6:	80 83       	st	Z, r24

	switch(u8_frequency)
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	3c 83       	std	Y+4, r19	; 0x04
    31f0:	2b 83       	std	Y+3, r18	; 0x03
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	83 30       	cpi	r24, 0x03	; 3
    31f8:	91 05       	cpc	r25, r1
    31fa:	c9 f1       	breq	.+114    	; 0x326e <timer1HwPWM_PhaseCorrect+0xec>
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	24 30       	cpi	r18, 0x04	; 4
    3202:	31 05       	cpc	r19, r1
    3204:	5c f4       	brge	.+22     	; 0x321c <timer1HwPWM_PhaseCorrect+0x9a>
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	81 30       	cpi	r24, 0x01	; 1
    320c:	91 05       	cpc	r25, r1
    320e:	89 f0       	breq	.+34     	; 0x3232 <timer1HwPWM_PhaseCorrect+0xb0>
    3210:	2b 81       	ldd	r18, Y+3	; 0x03
    3212:	3c 81       	ldd	r19, Y+4	; 0x04
    3214:	22 30       	cpi	r18, 0x02	; 2
    3216:	31 05       	cpc	r19, r1
    3218:	d9 f0       	breq	.+54     	; 0x3250 <timer1HwPWM_PhaseCorrect+0xce>
    321a:	55 c0       	rjmp	.+170    	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	9c 81       	ldd	r25, Y+4	; 0x04
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	91 05       	cpc	r25, r1
    3224:	99 f1       	breq	.+102    	; 0x328c <timer1HwPWM_PhaseCorrect+0x10a>
    3226:	2b 81       	ldd	r18, Y+3	; 0x03
    3228:	3c 81       	ldd	r19, Y+4	; 0x04
    322a:	25 30       	cpi	r18, 0x05	; 5
    322c:	31 05       	cpc	r19, r1
    322e:	e9 f1       	breq	.+122    	; 0x32aa <timer1HwPWM_PhaseCorrect+0x128>
    3230:	4a c0       	rjmp	.+148    	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
	{

	case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    3232:	e6 e4       	ldi	r30, 0x46	; 70
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	83 ec       	ldi	r24, 0xC3	; 195
    3238:	99 e0       	ldi	r25, 0x09	; 9
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    323e:	ef e4       	ldi	r30, 0x4F	; 79
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	82 ea       	ldi	r24, 0xA2	; 162
    3244:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
			 * 2. Prescaller = F_CPU
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_NO;
    3246:	ee e4       	ldi	r30, 0x4E	; 78
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	81 e1       	ldi	r24, 0x11	; 17
    324c:	80 83       	st	Z, r24
    324e:	3b c0       	rjmp	.+118    	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    3250:	e6 e4       	ldi	r30, 0x46	; 70
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	83 ec       	ldi	r24, 0xC3	; 195
    3256:	99 e0       	ldi	r25, 0x09	; 9
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    325c:	ef e4       	ldi	r30, 0x4F	; 79
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	82 ea       	ldi	r24, 0xA2	; 162
    3262:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/8
			 */
			TCCR1B = (1<<WGM13) | T1_PRESCALER_8;
    3264:	ee e4       	ldi	r30, 0x4E	; 78
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	82 e1       	ldi	r24, 0x12	; 18
    326a:	80 83       	st	Z, r24
    326c:	2c c0       	rjmp	.+88     	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    326e:	e6 e4       	ldi	r30, 0x46	; 70
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	83 ec       	ldi	r24, 0xC3	; 195
    3274:	99 e0       	ldi	r25, 0x09	; 9
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    327a:	ef e4       	ldi	r30, 0x4F	; 79
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	82 ea       	ldi	r24, 0xA2	; 162
    3280:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/64
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_64;
    3282:	ee e4       	ldi	r30, 0x4E	; 78
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	83 e1       	ldi	r24, 0x13	; 19
    3288:	80 83       	st	Z, r24
    328a:	1d c0       	rjmp	.+58     	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    328c:	e6 e4       	ldi	r30, 0x46	; 70
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	83 ec       	ldi	r24, 0xC3	; 195
    3292:	99 e0       	ldi	r25, 0x09	; 9
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
		     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
		     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    3298:	ef e4       	ldi	r30, 0x4F	; 79
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	82 ea       	ldi	r24, 0xA2	; 162
    329e:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/256
		     */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_256;
    32a0:	ee e4       	ldi	r30, 0x4E	; 78
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	84 e1       	ldi	r24, 0x14	; 20
    32a6:	80 83       	st	Z, r24
    32a8:	0e c0       	rjmp	.+28     	; 0x32c6 <timer1HwPWM_PhaseCorrect+0x144>
			break;

	case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
			ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    32aa:	e6 e4       	ldi	r30, 0x46	; 70
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	83 ec       	ldi	r24, 0xC3	; 195
    32b0:	99 e0       	ldi	r25, 0x09	; 9
    32b2:	91 83       	std	Z+1, r25	; 0x01
    32b4:	80 83       	st	Z, r24
			 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
			 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
			 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
			 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
			 */
			TCCR1A = (1<<WGM11) | (1<<COM1A1)  | (1<<COM1B1);
    32b6:	ef e4       	ldi	r30, 0x4F	; 79
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	82 ea       	ldi	r24, 0xA2	; 162
    32bc:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1A
			 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
			 * 2. Prescaller = F_CPU/1024
			 */
			TCCR1B =(1<<WGM13) | T1_PRESCALER_1024;
    32be:	ee e4       	ldi	r30, 0x4E	; 78
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	85 e1       	ldi	r24, 0x15	; 21
    32c4:	80 83       	st	Z, r24
			break;
	}
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <__udivmodqi4>:
    32d4:	99 1b       	sub	r25, r25
    32d6:	79 e0       	ldi	r23, 0x09	; 9
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <__udivmodqi4_ep>

000032da <__udivmodqi4_loop>:
    32da:	99 1f       	adc	r25, r25
    32dc:	96 17       	cp	r25, r22
    32de:	08 f0       	brcs	.+2      	; 0x32e2 <__udivmodqi4_ep>
    32e0:	96 1b       	sub	r25, r22

000032e2 <__udivmodqi4_ep>:
    32e2:	88 1f       	adc	r24, r24
    32e4:	7a 95       	dec	r23
    32e6:	c9 f7       	brne	.-14     	; 0x32da <__udivmodqi4_loop>
    32e8:	80 95       	com	r24
    32ea:	08 95       	ret

000032ec <__divmodhi4>:
    32ec:	97 fb       	bst	r25, 7
    32ee:	09 2e       	mov	r0, r25
    32f0:	07 26       	eor	r0, r23
    32f2:	0a d0       	rcall	.+20     	; 0x3308 <__divmodhi4_neg1>
    32f4:	77 fd       	sbrc	r23, 7
    32f6:	04 d0       	rcall	.+8      	; 0x3300 <__divmodhi4_neg2>
    32f8:	0c d0       	rcall	.+24     	; 0x3312 <__udivmodhi4>
    32fa:	06 d0       	rcall	.+12     	; 0x3308 <__divmodhi4_neg1>
    32fc:	00 20       	and	r0, r0
    32fe:	1a f4       	brpl	.+6      	; 0x3306 <__divmodhi4_exit>

00003300 <__divmodhi4_neg2>:
    3300:	70 95       	com	r23
    3302:	61 95       	neg	r22
    3304:	7f 4f       	sbci	r23, 0xFF	; 255

00003306 <__divmodhi4_exit>:
    3306:	08 95       	ret

00003308 <__divmodhi4_neg1>:
    3308:	f6 f7       	brtc	.-4      	; 0x3306 <__divmodhi4_exit>
    330a:	90 95       	com	r25
    330c:	81 95       	neg	r24
    330e:	9f 4f       	sbci	r25, 0xFF	; 255
    3310:	08 95       	ret

00003312 <__udivmodhi4>:
    3312:	aa 1b       	sub	r26, r26
    3314:	bb 1b       	sub	r27, r27
    3316:	51 e1       	ldi	r21, 0x11	; 17
    3318:	07 c0       	rjmp	.+14     	; 0x3328 <__udivmodhi4_ep>

0000331a <__udivmodhi4_loop>:
    331a:	aa 1f       	adc	r26, r26
    331c:	bb 1f       	adc	r27, r27
    331e:	a6 17       	cp	r26, r22
    3320:	b7 07       	cpc	r27, r23
    3322:	10 f0       	brcs	.+4      	; 0x3328 <__udivmodhi4_ep>
    3324:	a6 1b       	sub	r26, r22
    3326:	b7 0b       	sbc	r27, r23

00003328 <__udivmodhi4_ep>:
    3328:	88 1f       	adc	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	5a 95       	dec	r21
    332e:	a9 f7       	brne	.-22     	; 0x331a <__udivmodhi4_loop>
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	08 95       	ret

0000333a <__prologue_saves__>:
    333a:	2f 92       	push	r2
    333c:	3f 92       	push	r3
    333e:	4f 92       	push	r4
    3340:	5f 92       	push	r5
    3342:	6f 92       	push	r6
    3344:	7f 92       	push	r7
    3346:	8f 92       	push	r8
    3348:	9f 92       	push	r9
    334a:	af 92       	push	r10
    334c:	bf 92       	push	r11
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	ca 1b       	sub	r28, r26
    3364:	db 0b       	sbc	r29, r27
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	09 94       	ijmp

00003372 <__epilogue_restores__>:
    3372:	2a 88       	ldd	r2, Y+18	; 0x12
    3374:	39 88       	ldd	r3, Y+17	; 0x11
    3376:	48 88       	ldd	r4, Y+16	; 0x10
    3378:	5f 84       	ldd	r5, Y+15	; 0x0f
    337a:	6e 84       	ldd	r6, Y+14	; 0x0e
    337c:	7d 84       	ldd	r7, Y+13	; 0x0d
    337e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3380:	9b 84       	ldd	r9, Y+11	; 0x0b
    3382:	aa 84       	ldd	r10, Y+10	; 0x0a
    3384:	b9 84       	ldd	r11, Y+9	; 0x09
    3386:	c8 84       	ldd	r12, Y+8	; 0x08
    3388:	df 80       	ldd	r13, Y+7	; 0x07
    338a:	ee 80       	ldd	r14, Y+6	; 0x06
    338c:	fd 80       	ldd	r15, Y+5	; 0x05
    338e:	0c 81       	ldd	r16, Y+4	; 0x04
    3390:	1b 81       	ldd	r17, Y+3	; 0x03
    3392:	aa 81       	ldd	r26, Y+2	; 0x02
    3394:	b9 81       	ldd	r27, Y+1	; 0x01
    3396:	ce 0f       	add	r28, r30
    3398:	d1 1d       	adc	r29, r1
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	ed 01       	movw	r28, r26
    33a6:	08 95       	ret

000033a8 <_exit>:
    33a8:	f8 94       	cli

000033aa <__stop_program>:
    33aa:	ff cf       	rjmp	.-2      	; 0x33aa <__stop_program>
